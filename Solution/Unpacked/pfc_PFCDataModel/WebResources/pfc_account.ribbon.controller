/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@avanade/bizapps-sdk/dist/bizapps-sdk.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@avanade/bizapps-sdk/dist/bizapps-sdk.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AttributeMock\": () => (/* binding */ AttributeMock),\n/* harmony export */   \"BooleanFormAttribute\": () => (/* binding */ BooleanFormAttribute),\n/* harmony export */   \"BooleanODataAttribute\": () => (/* binding */ BooleanODataAttribute),\n/* harmony export */   \"CachedRibbonRuleEntry\": () => (/* binding */ CachedRibbonRuleEntry),\n/* harmony export */   \"CachedRibbonRuleExecutor\": () => (/* binding */ CachedRibbonRuleExecutor),\n/* harmony export */   \"ClientContextMock\": () => (/* binding */ ClientContextMock),\n/* harmony export */   \"ControlMock\": () => (/* binding */ ControlMock),\n/* harmony export */   \"CustomerFormAttribute\": () => (/* binding */ CustomerFormAttribute),\n/* harmony export */   \"CustomerODataAttribute\": () => (/* binding */ CustomerODataAttribute),\n/* harmony export */   \"DateTimeFormAttribute\": () => (/* binding */ DateTimeFormAttribute),\n/* harmony export */   \"DateTimeODataAttribute\": () => (/* binding */ DateTimeODataAttribute),\n/* harmony export */   \"DateTimeODataAttributeFilter\": () => (/* binding */ DateTimeODataAttributeFilter),\n/* harmony export */   \"DecimalFormAttribute\": () => (/* binding */ DecimalFormAttribute),\n/* harmony export */   \"DecimalODataAttribute\": () => (/* binding */ DecimalODataAttribute),\n/* harmony export */   \"DisplayRule\": () => (/* binding */ DisplayRule),\n/* harmony export */   \"DoubleFormAttribute\": () => (/* binding */ DoubleFormAttribute),\n/* harmony export */   \"DoubleODataAttribute\": () => (/* binding */ DoubleODataAttribute),\n/* harmony export */   \"DynamicsContext\": () => (/* binding */ DynamicsContext),\n/* harmony export */   \"DynamicsContextMock\": () => (/* binding */ DynamicsContextMock),\n/* harmony export */   \"DynamicsContextMockData\": () => (/* binding */ DynamicsContextMockData),\n/* harmony export */   \"EnableRule\": () => (/* binding */ EnableRule),\n/* harmony export */   \"Entity\": () => (/* binding */ Entity),\n/* harmony export */   \"EntityNameFormAttribute\": () => (/* binding */ EntityNameFormAttribute),\n/* harmony export */   \"EntityNameODataAttribute\": () => (/* binding */ EntityNameODataAttribute),\n/* harmony export */   \"ExecutionContextMock\": () => (/* binding */ ExecutionContextMock),\n/* harmony export */   \"Expires\": () => (/* binding */ Expires),\n/* harmony export */   \"FakeCommandResponse\": () => (/* binding */ FakeCommandResponse),\n/* harmony export */   \"FakeODataResponse\": () => (/* binding */ FakeODataResponse),\n/* harmony export */   \"FakeResponse\": () => (/* binding */ FakeResponse),\n/* harmony export */   \"FakeServer\": () => (/* binding */ FakeServer),\n/* harmony export */   \"FilterGroup\": () => (/* binding */ FilterGroup),\n/* harmony export */   \"FilterRule\": () => (/* binding */ FilterRule),\n/* harmony export */   \"FilterValue\": () => (/* binding */ FilterValue),\n/* harmony export */   \"FluentRuleFactory\": () => (/* binding */ FluentRuleFactory),\n/* harmony export */   \"FluentRules\": () => (/* binding */ FluentRules),\n/* harmony export */   \"FooterSectionMock\": () => (/* binding */ FooterSectionMock),\n/* harmony export */   \"FormAttributeBase\": () => (/* binding */ FormAttributeBase),\n/* harmony export */   \"FormContextDataMock\": () => (/* binding */ FormContextDataMock),\n/* harmony export */   \"FormContextDataProcessMock\": () => (/* binding */ FormContextDataProcessMock),\n/* harmony export */   \"FormContextEntityMock\": () => (/* binding */ FormContextEntityMock),\n/* harmony export */   \"FormContextMock\": () => (/* binding */ FormContextMock),\n/* harmony export */   \"FormContextUIMock\": () => (/* binding */ FormContextUIMock),\n/* harmony export */   \"FormItemMock\": () => (/* binding */ FormItemMock),\n/* harmony export */   \"FormObjectBase\": () => (/* binding */ FormObjectBase),\n/* harmony export */   \"FormSelectorMock\": () => (/* binding */ FormSelectorMock),\n/* harmony export */   \"FormTypes\": () => (/* binding */ FormTypes),\n/* harmony export */   \"FormUtils\": () => (/* binding */ FormUtils),\n/* harmony export */   \"FormVerifier\": () => (/* binding */ FormVerifier),\n/* harmony export */   \"GlobalContextMock\": () => (/* binding */ GlobalContextMock),\n/* harmony export */   \"Guid\": () => (/* binding */ Guid),\n/* harmony export */   \"Guids\": () => (/* binding */ Guids),\n/* harmony export */   \"HeaderSectionMock\": () => (/* binding */ HeaderSectionMock),\n/* harmony export */   \"IntegerFormAttribute\": () => (/* binding */ IntegerFormAttribute),\n/* harmony export */   \"IntegerODataAttribute\": () => (/* binding */ IntegerODataAttribute),\n/* harmony export */   \"ItemCollection\": () => (/* binding */ ItemCollection),\n/* harmony export */   \"LogLevel\": () => (/* binding */ LogLevel),\n/* harmony export */   \"Logger\": () => (/* binding */ Logger),\n/* harmony export */   \"LookUpCustomFilter\": () => (/* binding */ LookUpCustomFilter),\n/* harmony export */   \"LookupAttributeMock\": () => (/* binding */ LookupAttributeMock),\n/* harmony export */   \"LookupControlMock\": () => (/* binding */ LookupControlMock),\n/* harmony export */   \"LookupConverter\": () => (/* binding */ LookupConverter),\n/* harmony export */   \"LookupFormAttribute\": () => (/* binding */ LookupFormAttribute),\n/* harmony export */   \"LookupODataAttribute\": () => (/* binding */ LookupODataAttribute),\n/* harmony export */   \"MemoFormAttribute\": () => (/* binding */ MemoFormAttribute),\n/* harmony export */   \"MemoODataAttribute\": () => (/* binding */ MemoODataAttribute),\n/* harmony export */   \"MoneyFormAttribute\": () => (/* binding */ MoneyFormAttribute),\n/* harmony export */   \"MoneyODataAttribute\": () => (/* binding */ MoneyODataAttribute),\n/* harmony export */   \"MultiSelectPicklistFormAttribute\": () => (/* binding */ MultiSelectPicklistFormAttribute),\n/* harmony export */   \"MultiSelectPicklistODataAttribute\": () => (/* binding */ MultiSelectPicklistODataAttribute),\n/* harmony export */   \"NotificationLevel\": () => (/* binding */ NotificationLevel),\n/* harmony export */   \"NotificationRule\": () => (/* binding */ NotificationRule),\n/* harmony export */   \"NumberODataAttributeFilter\": () => (/* binding */ NumberODataAttributeFilter),\n/* harmony export */   \"ODataAttributeFilterBase\": () => (/* binding */ ODataAttributeFilterBase),\n/* harmony export */   \"ODataAttributeOrder\": () => (/* binding */ ODataAttributeOrder),\n/* harmony export */   \"ODataCommand\": () => (/* binding */ ODataCommand),\n/* harmony export */   \"ODataCommandResponse\": () => (/* binding */ ODataCommandResponse),\n/* harmony export */   \"ODataEntity\": () => (/* binding */ ODataEntity),\n/* harmony export */   \"ODataError\": () => (/* binding */ ODataError),\n/* harmony export */   \"ODataFailure\": () => (/* binding */ ODataFailure),\n/* harmony export */   \"ODataQueryBuilder\": () => (/* binding */ ODataQueryBuilder),\n/* harmony export */   \"ODataQueryBuilderLogic\": () => (/* binding */ ODataQueryBuilderLogic),\n/* harmony export */   \"ODataQueryBuilderMode\": () => (/* binding */ ODataQueryBuilderMode),\n/* harmony export */   \"ODataQueryParameters\": () => (/* binding */ ODataQueryParameters),\n/* harmony export */   \"ODataQueryResponseMapper\": () => (/* binding */ ODataQueryResponseMapper),\n/* harmony export */   \"ODataRequest\": () => (/* binding */ ODataRequest),\n/* harmony export */   \"ODataResponse\": () => (/* binding */ ODataResponse),\n/* harmony export */   \"ODataResponseTypes\": () => (/* binding */ ODataResponseTypes),\n/* harmony export */   \"Observable\": () => (/* binding */ Observable),\n/* harmony export */   \"OdataRegExBuilder\": () => (/* binding */ OdataRegExBuilder),\n/* harmony export */   \"OnSaveRule\": () => (/* binding */ OnSaveRule),\n/* harmony export */   \"OptionSetAttributeMock\": () => (/* binding */ OptionSetAttributeMock),\n/* harmony export */   \"OptionSetControlMock\": () => (/* binding */ OptionSetControlMock),\n/* harmony export */   \"OrderDirection\": () => (/* binding */ OrderDirection),\n/* harmony export */   \"OrganizationSettingsMock\": () => (/* binding */ OrganizationSettingsMock),\n/* harmony export */   \"OwnerFormAttribute\": () => (/* binding */ OwnerFormAttribute),\n/* harmony export */   \"OwnerODataAttribute\": () => (/* binding */ OwnerODataAttribute),\n/* harmony export */   \"PartyListFormAttribute\": () => (/* binding */ PartyListFormAttribute),\n/* harmony export */   \"PartyListODataAttribute\": () => (/* binding */ PartyListODataAttribute),\n/* harmony export */   \"PicklistConverter\": () => (/* binding */ PicklistConverter),\n/* harmony export */   \"PicklistFormAttribute\": () => (/* binding */ PicklistFormAttribute),\n/* harmony export */   \"PicklistODataAttribute\": () => (/* binding */ PicklistODataAttribute),\n/* harmony export */   \"QueryOperators\": () => (/* binding */ QueryOperators),\n/* harmony export */   \"RequireRule\": () => (/* binding */ RequireRule),\n/* harmony export */   \"RibbonContext\": () => (/* binding */ RibbonContext),\n/* harmony export */   \"RibbonContractBase\": () => (/* binding */ RibbonContractBase),\n/* harmony export */   \"RibbonControllerBase\": () => (/* binding */ RibbonControllerBase),\n/* harmony export */   \"RuleBase\": () => (/* binding */ RuleBase),\n/* harmony export */   \"RuleDefinition\": () => (/* binding */ RuleDefinition),\n/* harmony export */   \"RuleStore\": () => (/* binding */ RuleStore),\n/* harmony export */   \"RuleType\": () => (/* binding */ RuleType),\n/* harmony export */   \"Section\": () => (/* binding */ Section),\n/* harmony export */   \"SectionMock\": () => (/* binding */ SectionMock),\n/* harmony export */   \"StateFormAttribute\": () => (/* binding */ StateFormAttribute),\n/* harmony export */   \"StateODataAttribute\": () => (/* binding */ StateODataAttribute),\n/* harmony export */   \"StatusFormAttribute\": () => (/* binding */ StatusFormAttribute),\n/* harmony export */   \"StatusODataAttribute\": () => (/* binding */ StatusODataAttribute),\n/* harmony export */   \"Storage\": () => (/* binding */ Storage),\n/* harmony export */   \"StringFormAttribute\": () => (/* binding */ StringFormAttribute),\n/* harmony export */   \"StringODataAttribute\": () => (/* binding */ StringODataAttribute),\n/* harmony export */   \"StringODataAttributeFilter\": () => (/* binding */ StringODataAttributeFilter),\n/* harmony export */   \"SubscribeRule\": () => (/* binding */ SubscribeRule),\n/* harmony export */   \"Tab\": () => (/* binding */ Tab),\n/* harmony export */   \"TabMock\": () => (/* binding */ TabMock),\n/* harmony export */   \"TriggerableRuleBase\": () => (/* binding */ TriggerableRuleBase),\n/* harmony export */   \"UniqueidentifierFormAttribute\": () => (/* binding */ UniqueidentifierFormAttribute),\n/* harmony export */   \"UniqueidentifierODataAttribute\": () => (/* binding */ UniqueidentifierODataAttribute),\n/* harmony export */   \"UserSettingsMock\": () => (/* binding */ UserSettingsMock),\n/* harmony export */   \"ValueRule\": () => (/* binding */ ValueRule)\n/* harmony export */ });\nclass DynamicsContext {\r\n    _formContext;\r\n    _executionContext;\r\n    _globalContext;\r\n    constructor(formContext, executionContext, globalContext) {\r\n        this._formContext = formContext;\r\n        this._executionContext = executionContext;\r\n        this._globalContext = globalContext;\r\n        if (!this._globalContext) {\r\n            if (window.Xrm && window.Xrm.Utility && typeof window.Xrm.Utility.getGlobalContext === \"function\") {\r\n                this._globalContext = Xrm.Utility.getGlobalContext();\r\n            }\r\n        }\r\n    }\r\n    get executionContext() {\r\n        return this._executionContext;\r\n    }\r\n    get formContext() {\r\n        return this._formContext;\r\n    }\r\n    get globalContext() {\r\n        if (!this._globalContext)\r\n            throw new Error(\"Global context does not exists\");\r\n        return this._globalContext;\r\n    }\r\n}\n\nclass Guid {\r\n    /**\r\n     * Generates a new random GUID\r\n     *\r\n     * @returnsThe The generated GUID\r\n     */\r\n    static generate() {\r\n        let currentDate = new Date().getTime();\r\n        let millisecondsSincePageLoad = (performance && performance.now && (performance.now() * 1000)) || 0;\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n            let r = Math.random() * 16;\r\n            if (currentDate > 0) { //Use timestamp until depleted\r\n                r = (currentDate + r) % 16 | 0;\r\n                currentDate = Math.floor(currentDate / 16);\r\n            }\r\n            else {\r\n                r = (millisecondsSincePageLoad + r) % 16 | 0;\r\n                millisecondsSincePageLoad = Math.floor(millisecondsSincePageLoad / 16);\r\n            }\r\n            return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n        });\r\n    }\r\n    /**\r\n     * Ensures that the guid starts with \"{\" and ends with \"}\"\r\n     *\r\n     * @param value The GUID\r\n     * @returnsThe GUID with braces\r\n     */\r\n    static ensureBraces(value) {\r\n        if (!value.startsWith(\"{\"))\r\n            value = `{${value}`;\r\n        if (!value.endsWith(\"}\"))\r\n            value += \"}\";\r\n        return value;\r\n    }\r\n    /**\r\n     * Ensures that the guid does NOT starts with \"{\" and ends with \"}\"\r\n     *\r\n     * @param value The GUID\r\n     * @returns The GUID without braces\r\n     */\r\n    static ensureNoBraces(value) {\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Verbose\"] = 0] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Information\"] = 1] = \"Information\";\r\n    LogLevel[LogLevel[\"Warning\"] = 2] = \"Warning\";\r\n    LogLevel[LogLevel[\"Error\"] = 3] = \"Error\";\r\n})(LogLevel || (LogLevel = {}));\r\nclass Logger {\r\n    static log(msg, logLevel = LogLevel.Verbose) {\r\n        try {\r\n            if (window.console) {\r\n                this._executeConsoleLog(logLevel, msg);\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (console.log)\r\n                console.log(msg);\r\n        }\r\n    }\r\n    static _executeConsoleLog(logLevel, msg) {\r\n        switch (logLevel) {\r\n            case LogLevel.Verbose:\r\n                window.console.debug(msg);\r\n                break;\r\n            case LogLevel.Information:\r\n                window.console.info(msg);\r\n                break;\r\n            case LogLevel.Warning:\r\n                window.console.warn(msg);\r\n                break;\r\n            case LogLevel.Error:\r\n                window.console.error(msg);\r\n                break;\r\n            default:\r\n                window.console.log(msg);\r\n                break;\r\n        }\r\n    }\r\n}\n\nclass Observable {\r\n    _changeHandlers;\r\n    _internalId;\r\n    constructor() {\r\n        this._changeHandlers = [];\r\n        this._internalId = Guid.generate();\r\n    }\r\n    /**\r\n     * Registers a callback to be executed on a change event\r\n     *\r\n     * @param callback The callback that will be called on change\r\n     */\r\n    registerOnChange(callback) {\r\n        this._changeHandlers.push(callback);\r\n    }\r\n    /**\r\n     * Registers a callback to be executed on a change event\r\n     *\r\n     * @param callback The callback that will be called on change\r\n     */\r\n    addOnChange(callback) {\r\n        this.registerOnChange(callback);\r\n    }\r\n    /**\r\n     * Unregisteres a callback from receiving onchange events\r\n     *\r\n     * @param callback The callback that will be unregistered\r\n     */\r\n    unregisterOnChange(callback) {\r\n        const index = this._changeHandlers.indexOf(callback);\r\n        if (index >= 0)\r\n            this._changeHandlers.slice(index, 1);\r\n    }\r\n    /**\r\n     * Unregisteres a callback from receiving onchange events\r\n     *\r\n     * @param callback The callback that will be unregistered\r\n     */\r\n    removeOnChange(callback) {\r\n        this.unregisterOnChange(callback);\r\n    }\r\n    /**\r\n     * Unregisters all callbacks from receiving onchange events\r\n     */\r\n    clearHandlers() {\r\n        this._changeHandlers = [];\r\n    }\r\n    /**\r\n     * Notifies all Observers that a change event occurred\r\n     */\r\n    fireOnChange() {\r\n        for (const handler of this._changeHandlers)\r\n            handler(this);\r\n    }\r\n}\n\nclass Tab {\r\n    _formContext;\r\n    _tabName;\r\n    constructor(tabName, formContext) {\r\n        this._formContext = formContext;\r\n        this._tabName = tabName;\r\n        this.sections = this.getTabSafe()?.sections ?? new ItemCollection([]);\r\n    }\r\n    getTab() {\r\n        return this._formContext.ui.tabs.get(this._tabName);\r\n    }\r\n    getTabSafe() {\r\n        try {\r\n            return this._formContext.ui.tabs.get(this._tabName);\r\n        }\r\n        catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n    addTabStateChange(handler) {\r\n        this.getTab().addTabStateChange(handler);\r\n    }\r\n    getDisplayState() {\r\n        return this.getTab().getDisplayState();\r\n    }\r\n    getName() {\r\n        return this.getTab().getName();\r\n    }\r\n    getParent() {\r\n        return this.getTab().getParent();\r\n    }\r\n    removeTabStateChange(handler) {\r\n        this.getTab().removeTabStateChange(handler);\r\n    }\r\n    setDisplayState(displayState) {\r\n        this.getTab().setDisplayState(displayState);\r\n    }\r\n    sections;\r\n    getLabel() {\r\n        return this.getTab().getLabel();\r\n    }\r\n    setLabel(label) {\r\n        this.getTab().setLabel(label);\r\n    }\r\n    setFocus() {\r\n        this.getTab().setFocus();\r\n    }\r\n    setVisible(visible) {\r\n        const item = this._formContext.ui.tabs.get(this._tabName);\r\n        if (item != null)\r\n            item.setVisible(visible);\r\n    }\r\n    getVisible() {\r\n        const item = this._formContext.ui.tabs.get(this._tabName);\r\n        return item != null\r\n            ? item.getVisible()\r\n            : false;\r\n    }\r\n    setCollapsed(isCollapsed) {\r\n        const item = this._formContext.ui.tabs.get(this._tabName);\r\n        const state = isCollapsed ? \"collapsed\" : \"expanded\";\r\n        if (item != null)\r\n            item.setDisplayState(state);\r\n    }\r\n    isCollapsed() {\r\n        const item = this._formContext.ui.tabs.get(this._tabName);\r\n        return item != null\r\n            ? item.getDisplayState() === \"collapsed\"\r\n            : false;\r\n    }\r\n}\n\nvar FormTypes;\r\n(function (FormTypes) {\r\n    FormTypes[FormTypes[\"Undefined\"] = 0] = \"Undefined\";\r\n    FormTypes[FormTypes[\"Create\"] = 1] = \"Create\";\r\n    FormTypes[FormTypes[\"Update\"] = 2] = \"Update\";\r\n    FormTypes[FormTypes[\"ReadOnly\"] = 3] = \"ReadOnly\";\r\n    FormTypes[FormTypes[\"Disabled\"] = 4] = \"Disabled\";\r\n    FormTypes[FormTypes[\"BulkEdit\"] = 6] = \"BulkEdit\";\r\n    /**\r\n     * @deprecated QuickCreate has been deprecated\r\n     */\r\n    FormTypes[FormTypes[\"QuickCreate\"] = 5] = \"QuickCreate\";\r\n    /**\r\n     * @deprecated ReadOptimized has been deprecated.\r\n     */\r\n    FormTypes[FormTypes[\"ReadOptimized\"] = 11] = \"ReadOptimized\";\r\n})(FormTypes || (FormTypes = {}));\r\nclass FormUtils {\r\n    static getLookupStringRepresentation(lookup) {\r\n        if (lookup == null)\r\n            return null;\r\n        const value = FormUtils.firstOrDefault(lookup.getValue());\r\n        if (value == null)\r\n            return null;\r\n        const data = {\r\n            id: value.id,\r\n            name: value.name,\r\n            entityType: value.entityType,\r\n        };\r\n        if (data.id !== null && data.id !== undefined)\r\n            return `Lookup(type: ${data.entityType}, id: ${data.id}, name:\"${data.name}\")`;\r\n        return null;\r\n    }\r\n    static getLookupArrayStringRepresentation(lookups) {\r\n        const lookup = FormUtils.firstOrDefault(lookups);\r\n        if (lookup == null)\r\n            return \"\";\r\n        return FormUtils.getLookupStringRepresentation(lookup);\r\n    }\r\n    static getStringRepresentation(obj) {\r\n        let str = FormUtils.getLookupArrayStringRepresentation(obj);\r\n        if (str !== null)\r\n            return str;\r\n        str = FormUtils.getLookupStringRepresentation(obj);\r\n        if (str !== null)\r\n            return str;\r\n        return \"\";\r\n    }\r\n    static getLookupIdFromLookup(lookup) {\r\n        const value = lookup?.getValue();\r\n        if (!value)\r\n            return null;\r\n        if (value.length > 0) {\r\n            return value[0].id;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    static getLookupIdFromLookupArray(lookupArray) {\r\n        const lookup = FormUtils.firstOrDefault(lookupArray);\r\n        if (lookup == null)\r\n            return null;\r\n        return FormUtils.getLookupIdFromLookup(lookup);\r\n    }\r\n    static createLookupArray(id, entityLogicalName, name) {\r\n        const value = {\r\n            id,\r\n            entityType: entityLogicalName,\r\n            name,\r\n        };\r\n        return {\r\n            id: value.id,\r\n            name: value.name,\r\n            entityType: value.entityType\r\n        };\r\n    }\r\n    static firstOrDefault(array) {\r\n        if (array != null && array.length > 0)\r\n            return array[0];\r\n        return null;\r\n    }\r\n    static normalizeId(id) {\r\n        if (id != null)\r\n            return id.replace(\"{\", \"\").replace(\"}\", \"\").toLowerCase();\r\n        return id;\r\n    }\r\n}\n\nclass Section {\r\n    _formContext;\r\n    _tabName;\r\n    _sectionName;\r\n    constructor(tabName, sectionName, formContext) {\r\n        this._formContext = formContext;\r\n        this._tabName = tabName;\r\n        this._sectionName = sectionName;\r\n        this.controls = this.getSectionSafe()?.controls ?? new ItemCollection([]);\r\n    }\r\n    getSection() {\r\n        return this.getTab()?.sections.get(this._sectionName);\r\n    }\r\n    getSectionSafe() {\r\n        try {\r\n            return this.getTab()?.sections.get(this._sectionName);\r\n        }\r\n        catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n    getTab() {\r\n        return this._formContext.ui.tabs.get(this._tabName);\r\n    }\r\n    getName() {\r\n        return this.getSection().getName();\r\n    }\r\n    getParent() {\r\n        return this.getSection().getParent();\r\n    }\r\n    controls;\r\n    getLabel() {\r\n        return this.getSection().getLabel();\r\n    }\r\n    setLabel(label) {\r\n        this.getSection().setLabel(label);\r\n    }\r\n    setVisible(visible) {\r\n        this.getSection().setVisible(visible);\r\n    }\r\n    getVisible() {\r\n        return this.getSection()?.getVisible() ?? false;\r\n    }\r\n}\n\nclass FormObjectBase {\r\n    _formContext;\r\n    _objectId;\r\n    _formName;\r\n    _formSelector;\r\n    _formItem;\r\n    constructor(formContext, formName) {\r\n        this._formContext = formContext;\r\n        this._formName = formName;\r\n        if (this._formContext) {\r\n            this._objectId = this._formContext.data.entity.getId();\r\n            this._formSelector = this._formContext.ui.formSelector;\r\n            this._formItem = this._formSelector.getCurrentItem();\r\n        }\r\n    }\r\n    setVisible(isVisible) {\r\n        this._formItem?.setVisible(isVisible);\r\n    }\r\n    getId() {\r\n        return this._formItem?.getId() ?? \"\";\r\n    }\r\n    getLabel() {\r\n        return this._formItem?.getLabel() ?? \"\";\r\n    }\r\n    navigate() {\r\n        this._formItem?.navigate();\r\n    }\r\n    get formType() {\r\n        return this._formContext.ui.getFormType();\r\n    }\r\n    get objectId() {\r\n        return this._objectId;\r\n    }\r\n    get formName() {\r\n        return this._formName;\r\n    }\r\n    get formSelector() {\r\n        return this._formSelector;\r\n    }\r\n}\n\nclass RuleBase {\r\n    _ruleType;\r\n    _activateOn = null;\r\n    _internalId = Guid.generate();\r\n    ruleStore;\r\n    formContext;\r\n    targetAttribute = null;\r\n    function = null;\r\n    /**\r\n     * Base class for all FluentRules\r\n     */\r\n    constructor(formContext, ruleStore, ruleType) {\r\n        this.formContext = formContext;\r\n        this.ruleStore = ruleStore;\r\n        this._ruleType = ruleType;\r\n        this.ruleStore.registerRule(this);\r\n    }\r\n    /**\r\n     * Gets whether the rule is active for the current form type\r\n     */\r\n    get isActive() {\r\n        const formType = this.formContext.ui.getFormType();\r\n        if (formType === FormTypes.BulkEdit)\r\n            return false;\r\n        // activate on not set -> activate on all types\r\n        if (this._activateOn == null)\r\n            return true;\r\n        return this._activateOn.includes(formType);\r\n    }\r\n    /**\r\n     * Gets the rule's name\r\n     */\r\n    get name() {\r\n        if (!this.targetAttribute)\r\n            return null;\r\n        return this.targetAttribute.attributeName;\r\n    }\r\n    /**\r\n     * Specifies one or more form types on which this rule should be executed.\r\n     * By default (if this method is not called) the rule will be activated on all form types\r\n     *\r\n     * @param formTypes The form types on which the rule should be activated\r\n     */\r\n    forFormType(...formTypes) {\r\n        this._activateOn = formTypes;\r\n        return this;\r\n    }\r\n    /**\r\n     * Executes the rule function and returns the result\r\n     */\r\n    executeFunction() {\r\n        try {\r\n            if (this.function)\r\n                return this.function();\r\n        }\r\n        catch (e) {\r\n            console.error(`Exception occurred in ${this.name}: ${e}`);\r\n        }\r\n    }\r\n}\n\nclass TriggerableRuleBase extends RuleBase {\r\n    triggers = [];\r\n    /**\r\n     * Creates a new TriggerableRuleBase\r\n     */\r\n    constructor(formContext, ruleStore, ruleType) {\r\n        super(formContext, ruleStore, ruleType);\r\n    }\r\n    /**\r\n     * Set the attributes or models that trigger this rule\r\n     */\r\n    triggeredby(...triggers) {\r\n        this.triggers = triggers;\r\n        for (const trigger of this.triggers) {\r\n            const attributeChangeHandler = () => { this.execute(); };\r\n            this.ruleStore.registeredChangeHandlers.set(trigger, attributeChangeHandler);\r\n            trigger.registerOnChange(attributeChangeHandler);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Execute the rule when the form is loaded\r\n     */\r\n    onLoad() {\r\n        this.ruleStore.onLoadActivations.push(this);\r\n        return this;\r\n    }\r\n    /**\r\n     * Execute the rule when the form is saved\r\n     */\r\n    onSave() {\r\n        this.ruleStore.onSaveActivations.push(this);\r\n        return this;\r\n    }\r\n}\n\nvar RuleType;\r\n(function (RuleType) {\r\n    RuleType[\"EnableRule\"] = \"EnableRule\";\r\n    RuleType[\"RequireRule\"] = \"RequireRule\";\r\n    RuleType[\"NotificationRule\"] = \"NotificationRule\";\r\n    RuleType[\"DispalyRule\"] = \"DispalyRule\";\r\n    RuleType[\"TabCollapsedRule\"] = \"TabCollapsedRule\";\r\n    RuleType[\"ValueRule\"] = \"ValueRule\";\r\n    RuleType[\"SubscribeRule\"] = \"SubscribeRule\";\r\n    RuleType[\"OnSaveRule\"] = \"OnSaveRule\";\r\n    RuleType[\"FilterRule\"] = \"FilterRule\";\r\n})(RuleType || (RuleType = {}));\n\nclass ValueRule extends TriggerableRuleBase {\r\n    _targetValueAttribute;\r\n    _canSetNull;\r\n    _allowOverwrite;\r\n    _executeFireOnChange;\r\n    _saveIfReadonly;\r\n    _overwriteSameValue;\r\n    _activateAlways;\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.ValueRule);\r\n        this._canSetNull = true;\r\n        this._allowOverwrite = true;\r\n        this._executeFireOnChange = false;\r\n        this._saveIfReadonly = true;\r\n        this._overwriteSameValue = false;\r\n        this._activateAlways = false;\r\n    }\r\n    /**\r\n     * Prevents the calculated value to replace the existing one\r\n     */\r\n    noOverwrite() {\r\n        this._allowOverwrite = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Overwrite the attributes value even if its the same as the current value\r\n     */\r\n    overwriteSameValue() {\r\n        this._overwriteSameValue = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Allows the calculated value to be null\r\n     */\r\n    noDelete() {\r\n        this._canSetNull = false;\r\n        return this;\r\n    }\r\n    /**\r\n     * Tells the ValueRule to always set the value even when the form is \"Disabled\" or \"ReadOnly\"\r\n     *\r\n     * @returns {ValueRule}\r\n     */\r\n    activateAlways() {\r\n        this._activateAlways = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Specifies the function which returns the calcualted value\r\n     */\r\n    returns(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the target attribute\r\n     */\r\n    for(target) {\r\n        this._targetValueAttribute = target;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the attributes or models that trigger this rule\r\n     */\r\n    triggeredby(...triggers) {\r\n        super.triggeredby(...triggers);\r\n        return this;\r\n    }\r\n    /**\r\n     * Specifies one or more form types on which this rule should be executed.\r\n     * By default (if this method is not called) the rule will be activated on all form types\r\n     */\r\n    forFormType(...formTypes) {\r\n        super.forFormType(...formTypes);\r\n        return this;\r\n    }\r\n    /**\r\n     * Executes a fireOnChange after settings the value\r\n     */\r\n    doFireOnChange() {\r\n        this._executeFireOnChange = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Prevents setting a value on a dissabled attribute\r\n     */\r\n    doNotSaveWhenDisabled() {\r\n        this._saveIfReadonly = false;\r\n        return this;\r\n    }\r\n    _handleValue(valueToSet) {\r\n        const shouldSet = this._shouldSetThatValue(valueToSet);\r\n        if (!shouldSet)\r\n            return true;\r\n        if (this._activateAlways) {\r\n            this._targetValueAttribute.setValueInternalIgnoreLockedForm(valueToSet);\r\n        }\r\n        else {\r\n            this._targetValueAttribute.setValue(valueToSet);\r\n        }\r\n        if (this._executeFireOnChange)\r\n            this._targetValueAttribute.fireOnChange();\r\n        return true;\r\n    }\r\n    execute() {\r\n        if (!this.isActive)\r\n            return false;\r\n        if (this._targetValueAttribute.getDisabled() && this._saveIfReadonly)\r\n            this._targetValueAttribute.submitValue(\"dirty\");\r\n        const valueToSetOrPromise = this.executeFunction();\r\n        if (valueToSetOrPromise && typeof valueToSetOrPromise.then === \"function\") {\r\n            return valueToSetOrPromise.then((value) => this._handleValue(value));\r\n        }\r\n        return this._handleValue(valueToSetOrPromise);\r\n    }\r\n    _activateDefaultLoadBehaviour() {\r\n        const callingFormType = this.formContext.ui.getFormType();\r\n        const isCreateForm = callingFormType === FormTypes.Create;\r\n        const isUpdateForm = callingFormType === FormTypes.Update;\r\n        const isDisbaledForm = callingFormType === FormTypes.Disabled;\r\n        if (callingFormType > FormTypes.Update && callingFormType !== FormTypes.Disabled)\r\n            return false;\r\n        if (!isCreateForm && !isUpdateForm && !isDisbaledForm)\r\n            return false;\r\n        // if the document is not ready (rule (cascadingly) triggererd onload), only execute on create form\r\n        return isCreateForm;\r\n    }\r\n    _shouldSetThatValue(newValue) {\r\n        const currentValue = this._targetValueAttribute.getValue();\r\n        // Prevent Setting of NULL values\r\n        if ((newValue === undefined || newValue === null) && !this._canSetNull)\r\n            return false;\r\n        // Prevent Overwrite of not NULL current values\r\n        if (currentValue != null && !this._allowOverwrite)\r\n            return false;\r\n        // Prevent setting of the same value\r\n        if (currentValue === newValue && !this._overwriteSameValue)\r\n            return false;\r\n        return true;\r\n    }\r\n}\n\n/**\r\n * A DisplayRule is used to conditionally hide a field on a given Form\r\n */\r\nclass DisplayRule extends TriggerableRuleBase {\r\n    _targetAttributes = [];\r\n    /**\r\n     * Creates a new Display Rule\r\n     */\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.DispalyRule);\r\n    }\r\n    returns(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    /**\r\n    * Set the attributes that enabled/disabled on the form\r\n    */\r\n    for(...targets) {\r\n        this._targetAttributes = targets;\r\n        return this;\r\n    }\r\n    execute() {\r\n        if (!this.isActive)\r\n            return;\r\n        const result = this.executeFunction();\r\n        for (const targetAttribute of this._targetAttributes) {\r\n            targetAttribute.setVisible(result);\r\n        }\r\n    }\r\n}\n\n/**\r\n * An EnableRule is used to conditionally disable specific field on a given Form\r\n */\r\nclass EnableRule extends TriggerableRuleBase {\r\n    _targetAttributes = [];\r\n    /**\r\n     * Creates a new EnableRule\r\n     */\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.EnableRule);\r\n    }\r\n    returns(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    /**\r\n    * Set the attributes that enabled/disabled on the form\r\n    */\r\n    for(...targets) {\r\n        this._targetAttributes = targets;\r\n        return this;\r\n    }\r\n    execute() {\r\n        if (!this.isActive)\r\n            return;\r\n        const shouldBeEnabled = this.executeFunction();\r\n        for (const targetAttribute of this._targetAttributes) {\r\n            targetAttribute.setDisabled(!shouldBeEnabled);\r\n        }\r\n    }\r\n}\n\nclass FilterRule extends TriggerableRuleBase {\r\n    _currentPreSearchHandler = null;\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.FilterRule);\r\n    }\r\n    for(target) {\r\n        this.targetAttribute = target;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the FetchXML Filter function\r\n     */\r\n    filter(filterFunction) {\r\n        this.function = filterFunction;\r\n    }\r\n    execute() {\r\n        if (!this.isActive)\r\n            return;\r\n        const fetchXML = this.executeFunction();\r\n        if (fetchXML == null)\r\n            return;\r\n        if (!this.targetAttribute) {\r\n            console.error(\"The target attribute has not been set.\");\r\n            return;\r\n        }\r\n        const control = this.targetAttribute.control();\r\n        if (control) {\r\n            if (this._currentPreSearchHandler != null)\r\n                control.removePreSearch(this._currentPreSearchHandler);\r\n            this._currentPreSearchHandler = () => {\r\n                control.addCustomFilter(fetchXML);\r\n            };\r\n            control.addPreSearch(this._currentPreSearchHandler);\r\n        }\r\n    }\r\n}\n\nclass FormAttributeBase extends Observable {\r\n    _formContext;\r\n    attributeName;\r\n    constructor(attributeName, formContext) {\r\n        super();\r\n        this._formContext = formContext;\r\n        this.attributeName = attributeName;\r\n        this.controls = this.getAttributeSafe()?.controls ?? new ItemCollection([]);\r\n    }\r\n    getAttributeType() {\r\n        return this.getAttribute().getAttributeType();\r\n    }\r\n    getFormat() {\r\n        return this.getAttribute().getFormat();\r\n    }\r\n    getIsDirty() {\r\n        return this.getAttribute().getIsDirty();\r\n    }\r\n    getName() {\r\n        return this.getAttribute().getName();\r\n    }\r\n    getParent() {\r\n        return this.getAttribute().getParent();\r\n    }\r\n    getSubmitMode() {\r\n        return this.getAttribute().getSubmitMode();\r\n    }\r\n    getUserPrivilege() {\r\n        return this.getAttribute().getUserPrivilege();\r\n    }\r\n    setSubmitMode(submitMode) {\r\n        this.getAttribute().setSubmitMode(submitMode);\r\n    }\r\n    controls;\r\n    getValue() {\r\n        return this.getAttribute().getValue();\r\n    }\r\n    setValue(value) {\r\n        this.getAttribute().setValue(value);\r\n    }\r\n    getAttribute() {\r\n        return this._formContext.getAttribute(this.attributeName);\r\n    }\r\n    getAttributeSafe() {\r\n        try {\r\n            return this._formContext.getAttribute(this.attributeName);\r\n        }\r\n        catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n    control() {\r\n        return this._formContext.getControl(this.attributeName);\r\n    }\r\n    isCreateForm() {\r\n        return this._formContext.ui.getFormType() === 1;\r\n    }\r\n    isUpdateForm() {\r\n        return this._formContext.ui.getFormType() === 2;\r\n    }\r\n    isReadOnlyForm() {\r\n        return this._formContext.ui.getFormType() === 3;\r\n    }\r\n    isDisabledForm() {\r\n        return this._formContext.ui.getFormType() === 4;\r\n    }\r\n    isEditableForm() {\r\n        return this.isCreateForm || this.isUpdateForm;\r\n    }\r\n    isLockedForm() {\r\n        return !this.isEditableForm;\r\n    }\r\n    registerOnChange(handler) {\r\n        this.addOnChange(handler);\r\n    }\r\n    addOnChange(handler) {\r\n        this.getAttribute().addOnChange(handler);\r\n    }\r\n    removeOnChange(handler) {\r\n        this.getAttribute().removeOnChange(handler);\r\n    }\r\n    fireOnChange() {\r\n        this.getAttribute().fireOnChange();\r\n    }\r\n    setDisabled(disable) {\r\n        if (!disable && this.isLockedForm())\r\n            return;\r\n        const attributeControls = this.getAttribute().controls;\r\n        attributeControls.forEach(control => {\r\n            if (\"setDisabled\" in control) {\r\n                control.setDisabled(disable);\r\n            }\r\n        });\r\n    }\r\n    getDisabled() {\r\n        let disabled = true;\r\n        const attributeControls = this.getAttribute().controls;\r\n        attributeControls.forEach(control => {\r\n            if (\"getDisabled\" in control) {\r\n                disabled = disabled && control.getDisabled();\r\n            }\r\n        });\r\n        return disabled;\r\n    }\r\n    getVisible() {\r\n        const formAttribute = this.getAttribute();\r\n        const attributeControls = formAttribute.controls;\r\n        let visible = true;\r\n        attributeControls.forEach(control => { visible = visible && control.getVisible(); });\r\n        return visible;\r\n    }\r\n    setVisible(visible) {\r\n        const formAttribute = this.getAttribute();\r\n        const attributeControls = formAttribute.controls;\r\n        attributeControls.forEach(control => {\r\n            if (\"setVisible\" in control) {\r\n                control.setVisible(visible);\r\n            }\r\n        });\r\n    }\r\n    setValueInternal(value) {\r\n        if (this.isLockedForm())\r\n            return null;\r\n        return this.getAttribute().setValue(value);\r\n    }\r\n    setValueInternalIgnoreLockedForm(value) {\r\n        return this.getAttribute().setValue(value);\r\n    }\r\n    setValueIgnoreLockedForm(value) {\r\n        this.setValueInternalIgnoreLockedForm(value);\r\n    }\r\n    setRequiredLevel(requiredLevel) {\r\n        this.getAttribute().setRequiredLevel(requiredLevel);\r\n    }\r\n    getRequiredLevel() {\r\n        return this.getAttribute().getRequiredLevel();\r\n    }\r\n    getLabel() {\r\n        return this.control().getLabel();\r\n    }\r\n    setLabel(label) {\r\n        const attributeControls = this.getAttribute().controls;\r\n        attributeControls.forEach(control => { control.setLabel(label); });\r\n    }\r\n    submitValue(submit) {\r\n        this.getAttribute().setSubmitMode(submit);\r\n    }\r\n    setNotification(message, uniqueId) {\r\n        if (this.isLockedForm())\r\n            return;\r\n        const attributeControls = this.getAttribute().controls;\r\n        attributeControls.forEach(control => {\r\n            if (\"setNotification\" in control) {\r\n                control.setNotification(message, uniqueId);\r\n            }\r\n        });\r\n    }\r\n    clearNotification(uniqueId) {\r\n        if (this.isLockedForm())\r\n            return;\r\n        const attributeControls = this.getAttribute().controls;\r\n        attributeControls.forEach(control => {\r\n            if (\"clearNotification\" in control) {\r\n                control.clearNotification(uniqueId);\r\n            }\r\n        });\r\n    }\r\n    forEachControl(func) {\r\n        this.getAttribute().controls.forEach(func);\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this.getAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass StringFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n        this.controls = this._getTypedAttribute()?.controls;\r\n    }\r\n    _getTypedAttribute() {\r\n        return this.getAttributeSafe();\r\n    }\r\n    controls;\r\n    getFormat() {\r\n        return this._getTypedAttribute().getFormat();\r\n    }\r\n    getMaxLength() {\r\n        return this._getTypedAttribute().getMaxLength();\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getTypedAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass MemoFormAttribute extends StringFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass NumberFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n        this.controls = this._getTypedAttribute()?.controls;\r\n    }\r\n    _getTypedAttribute() {\r\n        return this.getAttributeSafe();\r\n    }\r\n    controls;\r\n    getFormat() {\r\n        return this._getTypedAttribute().getFormat();\r\n    }\r\n    getMax() {\r\n        return this._getTypedAttribute().getMax();\r\n    }\r\n    getMin() {\r\n        return this._getTypedAttribute().getMin();\r\n    }\r\n    getPrecision() {\r\n        return this._getTypedAttribute().getPrecision();\r\n    }\r\n    setPrecision(precision) {\r\n        this._getTypedAttribute().setPrecision(precision);\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getTypedAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass MoneyFormAttribute extends NumberFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass LookupFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n        this.controls = this._getTypedAttribute()?.controls;\r\n    }\r\n    _getTypedAttribute() {\r\n        return this.getAttributeSafe();\r\n    }\r\n    /**\r\n     * Builds the correct lookup array based on a variety input parameter types\r\n     *\r\n     * @param {string|{id: string, name: string}|Array<{id: string, name: string}>} value\r\n     * @returns {Array<{id: string}>|null} The lookup array\r\n     */\r\n    static buildLookupArray(value) {\r\n        let lookupValue;\r\n        if (typeof value === \"string\") {\r\n            lookupValue = [{ id: Guid.ensureBraces(value) }];\r\n        }\r\n        else if (typeof value === \"object\" && \"id\" in value && value.id) {\r\n            lookupValue = [value];\r\n            lookupValue[0].id = Guid.ensureBraces(value.id);\r\n        }\r\n        else if (typeof value === \"object\" && value instanceof Array && value.length > 0) {\r\n            lookupValue = value;\r\n            if (lookupValue != null && lookupValue[0] != null)\r\n                lookupValue[0].id = Guid.ensureBraces(lookupValue[0].id);\r\n        }\r\n        else {\r\n            throw new Error(\"Invalid Argument Type \\\"value\\\"\");\r\n        }\r\n        return lookupValue;\r\n    }\r\n    controls;\r\n    getValue() {\r\n        var value = this._getTypedAttribute().getValue();\r\n        if (value == null || value.length === 0)\r\n            return null;\r\n        return value[0];\r\n    }\r\n    getLookupId() {\r\n        const rawValue = this._getTypedAttribute().getValue();\r\n        if (rawValue == null || rawValue.length === 0) {\r\n            return null;\r\n        }\r\n        return rawValue[0].id;\r\n    }\r\n    getLookupName() {\r\n        const rawValue = this._getTypedAttribute().getValue();\r\n        if (rawValue == null || rawValue.length === 0) {\r\n            return undefined;\r\n        }\r\n        return rawValue[0].name;\r\n    }\r\n    setValue(value) {\r\n        const lookupArray = !value\r\n            ? null\r\n            : LookupFormAttribute.buildLookupArray(value);\r\n        this.setValueInternal(lookupArray);\r\n    }\r\n    getIsPartyList() {\r\n        return this._getTypedAttribute().getIsPartyList();\r\n    }\r\n    /**\r\n     * Sets the lookup value. A variety of parameter types is supported. Ignores locked form.\r\n     */\r\n    setValueIgnoreLockedForm(value) {\r\n        const lookupArray = LookupFormAttribute.buildLookupArray(value);\r\n        this.setValueInternalIgnoreLockedForm(lookupArray);\r\n    }\r\n    /**\r\n     * Sets the types of entities allowed in the lookup control.\r\n     */\r\n    setEntityTypes(logicalNames) {\r\n        this.control().setEntityTypes(logicalNames);\r\n    }\r\n    /**\r\n     * Gets the types of entities allowed in the lookup control.\r\n     */\r\n    getEntityTypes() {\r\n        return this.control().getEntityTypes();\r\n    }\r\n    /**\r\n     * Adds an additional custom filter to the lookup, with the \"AND\" filter operator.\r\n     * Can only be used within a \"pre search\" event handler\r\n     *\r\n     * @param filterField Field for which the filter value should be applied\r\n     * @param filterValue The filter value\r\n     */\r\n    addLookupFilter(filterField, filterValue) {\r\n        // noinspection HtmlUnknownAttribute\r\n        const filter = `<filter type='and'>\r\n            <condition attribute='${filterField}' operator='eq' value='${filterValue}' />\r\n        </filter>`;\r\n        this.controls.forEach(control => {\r\n            control.addCustomFilter(filter);\r\n        });\r\n    }\r\n    /**\r\n     * Sets a fetchXML lookup filter for this lookup attribute.\r\n     *\r\n     * @param The custom lookup filter\r\n     */\r\n    addLookupXMLFilter(xmlFilter) {\r\n        this.controls.forEach(control => {\r\n            control.addCustomFilter(xmlFilter);\r\n        });\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getTypedAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass UniqueidentifierFormAttribute extends LookupFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass OwnerFormAttribute extends UniqueidentifierFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass PicklistFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n        this.controls = this._getTypedAttribute()?.controls;\r\n    }\r\n    _getTypedAttribute() {\r\n        return this.getAttributeSafe();\r\n    }\r\n    controls;\r\n    getInitialValue() {\r\n        return this._getTypedAttribute().getInitialValue();\r\n    }\r\n    getFormat() {\r\n        return this._getTypedAttribute().getFormat();\r\n    }\r\n    getOption(value) {\r\n        if (typeof value === \"string\")\r\n            return this._getTypedAttribute().getOption(value);\r\n        else\r\n            return this._getTypedAttribute().getOption(value);\r\n    }\r\n    getOptions() {\r\n        return this._getTypedAttribute().getOptions();\r\n    }\r\n    removeOption(value) {\r\n        this.controls.forEach((control) => {\r\n            control?.removeOption(value);\r\n        });\r\n    }\r\n    getSelectedOption() {\r\n        return this._getTypedAttribute().getSelectedOption();\r\n    }\r\n    getText() {\r\n        return this._getTypedAttribute().getText();\r\n    }\r\n    setValue(value) {\r\n        this._getTypedAttribute().setValue(value);\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getTypedAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass StateFormAttribute extends PicklistFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass DoubleFormAttribute extends NumberFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass StatusFormAttribute extends PicklistFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass BooleanFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getAttribute().setIsValid(isValid, message);\r\n    }\r\n    _getAttribute() {\r\n        return this.getAttribute();\r\n    }\r\n    getInitialValue() {\r\n        return this._getAttribute().getInitialValue();\r\n    }\r\n}\n\nclass DecimalFormAttribute extends NumberFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass IntegerFormAttribute extends NumberFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass CustomerFormAttribute extends LookupFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass DateTimeFormAttribute extends FormAttributeBase {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n        this.controls = this._getTypedAttribute()?.controls;\r\n    }\r\n    _getTypedAttribute() {\r\n        return this.getAttributeSafe();\r\n    }\r\n    controls;\r\n    getFormat() {\r\n        return this._getTypedAttribute().getFormat();\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._getTypedAttribute().setIsValid(isValid, message);\r\n    }\r\n}\n\nclass MultiSelectPicklistFormAttribute extends PicklistFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nclass PartyListFormAttribute extends LookupFormAttribute {\r\n}\n\nclass EntityNameFormAttribute extends StringFormAttribute {\r\n    constructor(attributeName, formContext) {\r\n        super(attributeName, formContext);\r\n    }\r\n}\n\nvar NotificationLevel;\r\n(function (NotificationLevel) {\r\n    NotificationLevel[\"Info\"] = \"INFO\";\r\n    NotificationLevel[\"Warning\"] = \"WARNING\";\r\n    NotificationLevel[\"Error\"] = \"ERROR\";\r\n})(NotificationLevel || (NotificationLevel = {}));\r\n/**\r\n * A NotificationRule is used to conditionally show a notification on\r\n * either page level or on a specific attribute\r\n */\r\nclass NotificationRule extends TriggerableRuleBase {\r\n    _id;\r\n    _level = NotificationLevel.Info;\r\n    _showIfFunction = () => true;\r\n    isPageNotification = false;\r\n    constructor(formContext, ruleStore, id) {\r\n        super(formContext, ruleStore, RuleType.NotificationRule);\r\n        this._id = id || Guid.generate();\r\n        this.isPageNotification = false;\r\n    }\r\n    /**\r\n     * Sets the function which decides if the notification will be shown\r\n     */\r\n    if(func) {\r\n        this._showIfFunction = func;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the function which returns the notification message\r\n     *\r\n     * @param value The function that returns the message\r\n     */\r\n    returns(value) {\r\n        this.function = value;\r\n        if (typeof value !== \"function\")\r\n            this.function = () => value;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the form or attribute for which the notification will be displayed\r\n     */\r\n    for(formOrAttribute) {\r\n        this.isPageNotification = formOrAttribute instanceof FormObjectBase;\r\n        if (formOrAttribute instanceof FormAttributeBase)\r\n            this.targetAttribute = formOrAttribute;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the notification level (Info / Error / Warning)\r\n     */\r\n    isLevel(level) {\r\n        this._level = level;\r\n        return this;\r\n    }\r\n    execute() {\r\n        if (!this.isActive)\r\n            return;\r\n        try {\r\n            const message = this.executeFunction();\r\n            const showMessage = this._showIfFunction();\r\n            if (this.isPageNotification)\r\n                this.setPageNotification(showMessage, message);\r\n            else\r\n                this.setAttributeNotification(showMessage, message);\r\n        }\r\n        catch (e) {\r\n            console.error(`Exception occurred during NotificationRule execution: ${e}`);\r\n        }\r\n    }\r\n    setPageNotification(showMessage, message = \"\") {\r\n        const msg = this._level;\r\n        if (showMessage)\r\n            this.formContext.ui.setFormNotification(message, msg, this._id);\r\n        else\r\n            this.formContext.ui.clearFormNotification(this._id);\r\n    }\r\n    setAttributeNotification(showMessage, message = \"\") {\r\n        if (!this.targetAttribute) {\r\n            console.error(\"The target attribute has not been set.\");\r\n            return;\r\n        }\r\n        if (showMessage)\r\n            this.targetAttribute.setNotification(message, this._id);\r\n        else\r\n            this.targetAttribute.clearNotification(this._id);\r\n    }\r\n}\n\nclass OnSaveRule extends RuleBase {\r\n    _preventFunction = null;\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.OnSaveRule);\r\n        this.formContext.data.entity.addOnSave(execObj => {\r\n            if (this.isActive) {\r\n                if (this.function)\r\n                    this.executeFunction();\r\n                if (this._preventFunction != null) {\r\n                    const prevent = this._preventFunction();\r\n                    if (prevent)\r\n                        execObj.getEventArgs().preventDefault();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    preventsIf(boolfunc) {\r\n        this._preventFunction = boolfunc;\r\n        return this;\r\n    }\r\n    executes(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    execute() {\r\n        // Empty on purpose\r\n    }\r\n}\n\nclass RequireRule extends TriggerableRuleBase {\r\n    _targetAttributes = [];\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.RequireRule);\r\n    }\r\n    returns(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    for(...targets) {\r\n        this._targetAttributes = targets;\r\n        return this;\r\n    }\r\n    execute() {\r\n        if (this.isActive) {\r\n            const result = this.executeFunction();\r\n            for (const targetAttribute of this._targetAttributes) {\r\n                targetAttribute.setRequiredLevel(result ? \"required\" : \"none\");\r\n            }\r\n        }\r\n    }\r\n}\n\nclass SubscribeRule extends TriggerableRuleBase {\r\n    targetModel = null;\r\n    constructor(formContext, ruleStore) {\r\n        super(formContext, ruleStore, RuleType.SubscribeRule);\r\n    }\r\n    for(target) {\r\n        this.targetModel = target;\r\n        return this;\r\n    }\r\n    executes(func) {\r\n        this.function = func;\r\n        return this;\r\n    }\r\n    executeFunction() {\r\n        const result = super.executeFunction();\r\n        if (result && typeof result.then === \"function\") {\r\n            return result.then(() => {\r\n                this._doFireOnChange();\r\n            }, (error) => {\r\n                console.error(`Exception occurred during SubscribeRule execution: ${error}`);\r\n                throw error;\r\n            });\r\n        }\r\n        else {\r\n            this._doFireOnChange();\r\n            return result;\r\n        }\r\n    }\r\n    _doFireOnChange() {\r\n        if (this.targetModel)\r\n            this.targetModel.fireOnChange();\r\n    }\r\n    execute() {\r\n        if (this.isActive)\r\n            this.executeFunction();\r\n    }\r\n}\n\nclass FluentRuleFactory {\r\n    _formContext;\r\n    _ruleStore;\r\n    constructor(formContext, ruleStore) {\r\n        this._formContext = formContext;\r\n        this._ruleStore = ruleStore;\r\n    }\r\n    /**\r\n     * Creates a new DisplayRule\r\n     */\r\n    createDisplayRule() {\r\n        return new DisplayRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new EnableRule\r\n     */\r\n    createEnableRule() {\r\n        return new EnableRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new NotificationRule\r\n     */\r\n    createNotificationRule() {\r\n        return new NotificationRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new FilterRule\r\n     */\r\n    createFilterRule() {\r\n        return new FilterRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new OnSaveRule\r\n     */\r\n    createOnSaveRule() {\r\n        return new OnSaveRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new RequireRule\r\n     */\r\n    createRequireRule() {\r\n        return new RequireRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new ValueRule\r\n     */\r\n    createValueRule() {\r\n        return new ValueRule(this._formContext, this._ruleStore);\r\n    }\r\n    /**\r\n     * Creates a new SubscribeRule\r\n     */\r\n    createSubscribeRule() {\r\n        return new SubscribeRule(this._formContext, this._ruleStore);\r\n    }\r\n}\n\nclass RuleStore {\r\n    rules;\r\n    onLoadActivations;\r\n    onSaveActivations;\r\n    registeredChangeHandlers;\r\n    constructor() {\r\n        this.rules = [];\r\n        this.onLoadActivations = [];\r\n        this.onSaveActivations = [];\r\n        this.registeredChangeHandlers = new Map();\r\n    }\r\n    clearRules() {\r\n        for (const rule of this.rules) {\r\n            if (rule instanceof NotificationRule) {\r\n                if (rule.isPageNotification) {\r\n                    rule.setPageNotification(false);\r\n                }\r\n                else {\r\n                    rule.setAttributeNotification(false);\r\n                }\r\n            }\r\n        }\r\n        for (let [trigger, handler] of this.registeredChangeHandlers) {\r\n            trigger.unregisterOnChange(handler);\r\n        }\r\n        this.registeredChangeHandlers.clear();\r\n        this.onLoadActivations = [];\r\n        this.onSaveActivations = [];\r\n        this.rules = [];\r\n    }\r\n    registerRule(rule) {\r\n        this.rules.push(rule);\r\n    }\r\n    get allSubscribeRules() {\r\n        return this.rules.filter(r => r instanceof SubscribeRule);\r\n    }\r\n    get onLoadActivationSubscribeRules() {\r\n        return this.onLoadActivations.filter(r => r instanceof SubscribeRule);\r\n    }\r\n}\n\nclass FluentRules {\r\n    _dynamicsContext;\r\n    _ruleStore;\r\n    _impactedOnLoadRules;\r\n    _ruleFactory;\r\n    isDocumentReady;\r\n    constructor(dynamicsContext) {\r\n        this._dynamicsContext = dynamicsContext;\r\n        this._ruleStore = new RuleStore();\r\n        this._ruleFactory = new FluentRuleFactory(this._dynamicsContext.formContext, this._ruleStore);\r\n        this.isDocumentReady = false;\r\n        /**\r\n         * This array stores all models that are triggered by an onload subscribe rule.\r\n         * The FluentRule framework waits for all these models to fire an onchange event\r\n         * before setting {@link isDocumentReady} to true.\r\n         */\r\n        this._impactedOnLoadRules = [];\r\n    }\r\n    async onLoad() {\r\n        const rules = this._ruleStore.allSubscribeRules;\r\n        for (const rule of this._ruleStore.onLoadActivationSubscribeRules) {\r\n            const impactedRules = this._findImpactedRules(rules, rule);\r\n            this._impactedOnLoadRules.push(...impactedRules);\r\n        }\r\n        for (const rule of this._impactedOnLoadRules) {\r\n            if (rule.targetModel)\r\n                rule.targetModel.registerOnChange(this._impactedModelChangeHandler);\r\n        }\r\n        await Promise.all(this._ruleStore.onLoadActivations.map(item => item.execute()));\r\n        this._setDocumentReadyState();\r\n    }\r\n    async onSave() {\r\n        await Promise.all(this._ruleStore.onSaveActivations.map(item => item.execute()));\r\n    }\r\n    _setDocumentReadyState() {\r\n        if (this._impactedOnLoadRules.length === 0)\r\n            this.isDocumentReady = true;\r\n    }\r\n    _impactedModelChangeHandler(model) {\r\n        const rules = this._impactedOnLoadRules.filter(r => r.targetModel?._internalId === model._internalId);\r\n        for (const rule of rules) {\r\n            const index = this._impactedOnLoadRules.indexOf(rule);\r\n            this._impactedOnLoadRules.splice(index, 1);\r\n        }\r\n    }\r\n    _findImpactedRules(allRules, sourceRule) {\r\n        const impactedRules = allRules\r\n            .filter(r => r.triggers.some(t => t === sourceRule.targetModel));\r\n        for (const impactedRule of impactedRules) {\r\n            const childImpactedRules = this._findImpactedRules(allRules, impactedRule);\r\n            impactedRules.push(...childImpactedRules);\r\n        }\r\n        return impactedRules;\r\n    }\r\n}\n\nclass LookUpCustomFilter {\r\n    static isLookupControl(control) {\r\n        return true;\r\n    }\r\n    static apply(attributeAccessor, func) {\r\n        attributeAccessor().forEachControl((item) => {\r\n            if (this.isLookupControl(item))\r\n                func(item);\r\n        });\r\n    }\r\n    static removeFilter(attributeAccessor, handler) {\r\n        this.apply(attributeAccessor, (c) => c.removePreSearch(handler));\r\n    }\r\n    static applyFilter(attributeAccessor, fetchXmlFilterString, logicalName) {\r\n        const preSearchHandler = () => {\r\n            this.apply(attributeAccessor, (c) => {\r\n                c.addCustomFilter(fetchXmlFilterString, logicalName != null ? logicalName : undefined);\r\n            });\r\n        };\r\n        this.apply(attributeAccessor, (c) => c.addPreSearch(preSearchHandler));\r\n        return preSearchHandler;\r\n    }\r\n    static applyFilterMethod(attributeAccessor, handlerFunc, logicalName, addCustomFilterPredicate) {\r\n        const preSearchHandler = () => {\r\n            if (!addCustomFilterPredicate || typeof addCustomFilterPredicate !== \"function\" || addCustomFilterPredicate() === true) {\r\n                this.apply(attributeAccessor, (c) => {\r\n                    c.addCustomFilter(handlerFunc(), logicalName != null ? logicalName : undefined);\r\n                });\r\n            }\r\n        };\r\n        this.apply(attributeAccessor, (c) => c.addPreSearch(preSearchHandler));\r\n        return preSearchHandler;\r\n    }\r\n}\n\nclass ODataAttributeFilterBase {\r\n    _not;\r\n    _filterValue;\r\n    _attribute;\r\n    /**\r\n     * @param attribute The Attribute to filter\r\n     */\r\n    constructor(attribute) {\r\n        this._not = false;\r\n        this._filterValue = \"\";\r\n        this._attribute = attribute;\r\n    }\r\n    get filterValue() {\r\n        return this._filterValue;\r\n    }\r\n    isNotNull() {\r\n        this._filterValue = `${this._attribute.selector} ne null`;\r\n        return this;\r\n    }\r\n    isNull() {\r\n        this._filterValue = `${this._attribute.selector} eq null`;\r\n        return this;\r\n    }\r\n    equal(value) {\r\n        this._buildFilterValue(\"eq\", value);\r\n        return this;\r\n    }\r\n    notEqual(value) {\r\n        this._buildFilterValue(\"ne\", value);\r\n        return this;\r\n    }\r\n    _buildFilterValue(operator, value) {\r\n        this._filterValue = `${this._attribute.selector} ${operator} ${this._attribute.convert(value)}`;\r\n    }\r\n}\n\nvar OrderDirection;\r\n(function (OrderDirection) {\r\n    OrderDirection[OrderDirection[\"Ascending\"] = 0] = \"Ascending\";\r\n    OrderDirection[OrderDirection[\"Descending\"] = 1] = \"Descending\";\r\n})(OrderDirection || (OrderDirection = {}));\r\nclass ODataAttributeOrder {\r\n    _attribute;\r\n    _orderDirection;\r\n    constructor(attribute) {\r\n        this._attribute = attribute;\r\n        this._orderDirection = OrderDirection.Ascending;\r\n    }\r\n    ascending() {\r\n        this._orderDirection = OrderDirection.Ascending;\r\n        return this;\r\n    }\r\n    descending() {\r\n        this._orderDirection = OrderDirection.Descending;\r\n        return this;\r\n    }\r\n    buildOrderString() {\r\n        const direction = this._orderDirection === OrderDirection.Ascending ? \"asc\" : \"desc\";\r\n        return `${this._attribute.selector} ${direction}`;\r\n    }\r\n}\n\nclass ODataAttributeBase {\r\n    relation;\r\n    attributeName;\r\n    constructor(attributeName, relation) {\r\n        this.attributeName = attributeName;\r\n        this.relation = relation;\r\n    }\r\n    get selector() {\r\n        return this.attributeName.toLowerCase();\r\n    }\r\n    convert(value) {\r\n        return value;\r\n    }\r\n    asFilter() {\r\n        return new ODataAttributeFilterBase(this);\r\n    }\r\n    asOrder() {\r\n        return new ODataAttributeOrder(this);\r\n    }\r\n}\n\nclass StringODataAttributeFilter extends ODataAttributeFilterBase {\r\n    /**\r\n     * @param attribute The Attribute to filter\r\n     */\r\n    constructor(attribute) {\r\n        super(attribute);\r\n        this._not = false;\r\n    }\r\n    get filterValue() {\r\n        return (this._not ? \"not \" : \"\") + this._filterValue;\r\n    }\r\n    not() {\r\n        this._not = true;\r\n        return this;\r\n    }\r\n    startsWith(value) {\r\n        this._filterValue = `startswith(${this._attribute.selector},${this._attribute.convert(value)})`;\r\n        return this;\r\n    }\r\n    endsWith(value) {\r\n        this._filterValue = `endswith(${this._attribute.selector},${this._attribute.convert(value)})`;\r\n        return this;\r\n    }\r\n    contains(value) {\r\n        this._filterValue = `contains(${this._attribute.selector},${this._attribute.convert(value)})`;\r\n        return this;\r\n    }\r\n}\n\nclass MemoODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        return `'${value}'`;\r\n    }\r\n    asFilter() {\r\n        return new StringODataAttributeFilter(this);\r\n    }\r\n}\n\nclass NumberODataAttributeFilter extends ODataAttributeFilterBase {\r\n    greaterThan(value) {\r\n        this._buildFilterValue(\"gt\", value);\r\n        return this;\r\n    }\r\n    lessThan(value) {\r\n        this._buildFilterValue(\"lt\", value);\r\n        return this;\r\n    }\r\n    lessThanOrEqual(value) {\r\n        this._buildFilterValue(\"le\", value);\r\n        return this;\r\n    }\r\n    greaterThanOrEqual(value) {\r\n        this._buildFilterValue(\"ge\", value);\r\n        return this;\r\n    }\r\n}\n\nclass MoneyODataAttribute extends ODataAttributeBase {\r\n    asFilter() {\r\n        return new NumberODataAttributeFilter(this);\r\n    }\r\n}\n\nclass OwnerODataAttribute extends ODataAttributeBase {\r\n    get selector() {\r\n        return `_${super.selector}_value`;\r\n    }\r\n    convert(value) {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nclass StateODataAttribute extends ODataAttributeBase {\r\n}\n\nclass DoubleODataAttribute extends ODataAttributeBase {\r\n    asFilter() {\r\n        return new NumberODataAttributeFilter(this);\r\n    }\r\n}\n\nclass LookupODataAttribute extends ODataAttributeBase {\r\n    get selector() {\r\n        return `_${super.selector}_value`;\r\n    }\r\n    convert(value) {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nclass StatusODataAttribute extends ODataAttributeBase {\r\n}\n\nclass StringODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        return `'${value}'`;\r\n    }\r\n    asFilter() {\r\n        return new StringODataAttributeFilter(this);\r\n    }\r\n}\n\nclass BooleanODataAttribute extends ODataAttributeBase {\r\n}\n\nclass DecimalODataAttribute extends ODataAttributeBase {\r\n    asFilter() {\r\n        return new NumberODataAttributeFilter(this);\r\n    }\r\n}\n\nclass IntegerODataAttribute extends ODataAttributeBase {\r\n    asFilter() {\r\n        return new NumberODataAttributeFilter(this);\r\n    }\r\n}\n\nclass CustomerODataAttribute extends ODataAttributeBase {\r\n    get selector() {\r\n        return `_${super.selector}_value`;\r\n    }\r\n    convert(value) {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nclass DateTimeODataAttributeFilter extends ODataAttributeFilterBase {\r\n    greaterThan(value) {\r\n        this._buildFilterValue(\"gt\", value);\r\n        return this;\r\n    }\r\n    lessThan(value) {\r\n        this._buildFilterValue(\"lt\", value);\r\n        return this;\r\n    }\r\n    lessThanOrEqual(value) {\r\n        this._buildFilterValue(\"le\", value);\r\n        return this;\r\n    }\r\n    greaterThanOrEqual(value) {\r\n        this._buildFilterValue(\"ge\", value);\r\n        return this;\r\n    }\r\n}\n\nclass DateTimeODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        return value.toISOString();\r\n    }\r\n    asFilter() {\r\n        return new DateTimeODataAttributeFilter(this);\r\n    }\r\n}\n\nclass PicklistODataAttribute extends ODataAttributeBase {\r\n}\n\nclass MultiSelectPicklistODataAttribute extends ODataAttributeBase {\r\n}\n\nclass PartyListODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nclass UniqueidentifierODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        if (value === null || value === undefined)\r\n            return null;\r\n        return value.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    }\r\n}\n\nclass EntityNameODataAttribute extends ODataAttributeBase {\r\n    convert(value) {\r\n        return `'${value}'`;\r\n    }\r\n    asFilter() {\r\n        return new StringODataAttributeFilter(this);\r\n    }\r\n}\n\nclass ODataEntity {\r\n    _relation;\r\n    EntitySetName = \"\";\r\n    constructor(relation) {\r\n        this._relation = relation;\r\n    }\r\n}\n\nclass LookupConverter {\r\n    static createAttributeLookup(id, logicalName, name) {\r\n        return [{\r\n                id,\r\n                entityType: logicalName,\r\n                name,\r\n            }];\r\n    }\r\n    static createAttributeLookupFromODataResponse(odataResponse, attributeSelector) {\r\n        return {\r\n            id: odataResponse[attributeSelector],\r\n            entityType: odataResponse[`${attributeSelector}@Microsoft.Dynamics.CRM.lookuplogicalname`],\r\n            name: odataResponse[`${attributeSelector}@OData.Community.Display.V1.FormattedValue`],\r\n        };\r\n    }\r\n}\n\nclass PicklistConverter {\r\n    static createAttributeLookupFromODataResponse(odataResponse, attributeSelector) {\r\n        return {\r\n            value: odataResponse[attributeSelector],\r\n            name: odataResponse[`${attributeSelector}@OData.Community.Display.V1.FormattedValue`],\r\n        };\r\n    }\r\n}\n\nclass FilterGroup {\r\n    _expressions;\r\n    /**\r\n     * @param {Array<FilterValue>} expressions The filter values\r\n     */\r\n    constructor(expressions) {\r\n        this._expressions = expressions;\r\n    }\r\n    get filterValue() {\r\n        let value = \"(\";\r\n        for (const exp of this._expressions) {\r\n            value += exp.filterValue;\r\n        }\r\n        return `${value})`;\r\n    }\r\n}\n\nclass FilterValue {\r\n    get filterValue() {\r\n        return \"\";\r\n    }\r\n}\n\n// ReSharper disable once InconsistentNaming\r\nclass AndQueryOperator extends FilterValue {\r\n    get filterValue() {\r\n        return \" and \";\r\n    }\r\n}\r\n// ReSharper disable once InconsistentNaming\r\nclass OrQueryOperator extends FilterValue {\r\n    get filterValue() {\r\n        return \" or \";\r\n    }\r\n}\r\n/**\r\n * @readonly\r\n */\r\nconst QueryOperators = {\r\n    And: new AndQueryOperator(),\r\n    Or: new OrQueryOperator(),\r\n};\n\nclass Entity {\r\n    relation = \"\";\r\n    EntityLogicalName = \"\";\r\n    EntitySchemaName = \"\";\r\n    EntitySetName = \"\";\r\n    PrimaryIdAttribute = \"\";\r\n    PrimaryNameAttribute = \"\";\r\n    constructor(relation) {\r\n        this.relation = relation;\r\n    }\r\n}\n\nvar ODataQueryBuilderMode;\r\n(function (ODataQueryBuilderMode) {\r\n    ODataQueryBuilderMode[ODataQueryBuilderMode[\"Undefined\"] = 0] = \"Undefined\";\r\n    ODataQueryBuilderMode[ODataQueryBuilderMode[\"SelectSingle\"] = 1] = \"SelectSingle\";\r\n    ODataQueryBuilderMode[ODataQueryBuilderMode[\"SelectMultiple\"] = 2] = \"SelectMultiple\";\r\n})(ODataQueryBuilderMode || (ODataQueryBuilderMode = {}));\n\nclass ODataQueryBuilderLogic {\r\n    _queryParameters;\r\n    _query;\r\n    _isPrimarySelector;\r\n    /**\r\n     * Creates a new Instance\r\n     */\r\n    constructor(queryParameters) {\r\n        this._queryParameters = queryParameters;\r\n        this._query = this._buildBaseQuery();\r\n        this._isPrimarySelector = true;\r\n    }\r\n    /**\r\n     * Builds the OData Query String\r\n     */\r\n    buildQueryString() {\r\n        if (this._queryParameters.isSelectSingle())\r\n            this._addEntityIdToQuery();\r\n        this._addSelectToQuery();\r\n        this._addExpandersToQuery();\r\n        this._addFiltersToQuery();\r\n        this._addOrderByToQuery();\r\n        this._addTopToQuery();\r\n        return this._query;\r\n    }\r\n    _addEntityIdToQuery() {\r\n        if (this._queryParameters.entityId == null)\r\n            throw \"Entity Id not available on query paramaeters\";\r\n        const cleanedEntityId = this._queryParameters.entityId.replace(\"{\", \"\").replace(\"}\", \"\");\r\n        this._query += `(${cleanedEntityId})`;\r\n    }\r\n    _addSelectToQuery() {\r\n        if (!this._queryParameters.hasPrimaryAttributes()) {\r\n            this._query += `${this._getNextUrlSelector()}$select=*`;\r\n            return;\r\n        }\r\n        const relationAttributes = this._queryParameters.primaryAttributes\r\n            .filter(attr => attr.relation != null);\r\n        for (const attr of relationAttributes) {\r\n            const relName = attr.relation;\r\n            if (relName != null) {\r\n                if (!this._queryParameters.expanders.hasOwnProperty(relName))\r\n                    this._queryParameters.expanders.set(relName, []);\r\n                this._queryParameters.expanders.get(relName).push(attr.selector);\r\n            }\r\n        }\r\n        const localAttributes = this._queryParameters.primaryAttributes\r\n            .filter(attr => attr.relation == null);\r\n        this._query += `${this._getNextUrlSelector()}$select=`;\r\n        for (let i = 0; i < localAttributes.length; i++) {\r\n            this._query += localAttributes[i].selector;\r\n            if (i < localAttributes.length - 1)\r\n                this._query += \",\";\r\n        }\r\n    }\r\n    _addOrderByToQuery() {\r\n        if (!this._queryParameters.hasOrderByAttributes())\r\n            return;\r\n        this._query += `${this._getNextUrlSelector()}$orderby=`;\r\n        for (let i = 0; i < this._queryParameters.orderByAttributes.length; i++) {\r\n            const attribute = this._queryParameters.orderByAttributes[i];\r\n            if (attribute instanceof ODataAttributeOrder)\r\n                this._query += attribute.buildOrderString();\r\n            else if (attribute instanceof ODataAttributeBase && attribute.relation == null)\r\n                this._query += attribute.selector;\r\n            else\r\n                throw new Error(\"Invalid orderby usage!\");\r\n            if (i !== this._queryParameters.orderByAttributes.length - 1)\r\n                this._query += \",\";\r\n        }\r\n    }\r\n    _addExpandersToQuery() {\r\n        if (!this._queryParameters.hasExpanders())\r\n            return;\r\n        this._query += `${this._getNextUrlSelector()}$expand=`;\r\n        for (let i = 0; i < Object.keys(this._queryParameters.expanders).length; i++) {\r\n            const relation = Object.keys(this._queryParameters.expanders)[i];\r\n            const attributes = this._queryParameters.expanders.get(relation);\r\n            if (attributes != null)\r\n                this._query += `${relation}($select=${attributes.join(\",\")})`;\r\n            else\r\n                console.log(`No attributes of relation ${relation} found in expander object`);\r\n            if (i < this._queryParameters.expanders.size - 1)\r\n                this._query += \",\";\r\n        }\r\n    }\r\n    _addFiltersToQuery() {\r\n        if (!this._queryParameters.hasFilters())\r\n            return;\r\n        if (this._queryParameters.selectionMode === ODataQueryBuilderMode.SelectSingle)\r\n            throw \"Cannot apply filters when selecting a single record\";\r\n        this._query += `${this._getNextUrlSelector()}$filter=`;\r\n        for (let i = 0; i < this._queryParameters.filters.length; i++) {\r\n            const filter = this._queryParameters.filters[i];\r\n            this._query += filter.filterValue;\r\n        }\r\n    }\r\n    _addTopToQuery() {\r\n        if (this._queryParameters.hasLimit())\r\n            this._query += `${this._getNextUrlSelector()}$top=${this._queryParameters.limit}`;\r\n    }\r\n    _getNextUrlSelector() {\r\n        if (this._isPrimarySelector === true) {\r\n            this._isPrimarySelector = false;\r\n            return \"?\";\r\n        }\r\n        return \"&\";\r\n    }\r\n    _buildBaseQuery() {\r\n        return this._queryParameters.entity.EntitySetName.toLowerCase();\r\n    }\r\n}\n\nclass Storage {\r\n    _db;\r\n    constructor() {\r\n        if (window.indexedDB)\r\n            this.open();\r\n    }\r\n    async open() {\r\n        await new Promise((resolve, reject) => {\r\n            if (this._db) {\r\n                resolve();\r\n            }\r\n            const dbRequest = window.indexedDB.open(\"dss-cache\");\r\n            dbRequest.onerror = (event) => {\r\n                console.error(event);\r\n                reject(\"Can't open index db database\");\r\n            };\r\n            dbRequest.onblocked = (event) => {\r\n                console.error(event);\r\n                reject(\"Can't open index db database\");\r\n            };\r\n            dbRequest.onsuccess = (event) => {\r\n                this._db = event?.target.result;\r\n                resolve();\r\n            };\r\n            dbRequest.onupgradeneeded = (event) => {\r\n                const db = event?.target.result;\r\n                if (!db.objectStoreNames.contains('dss-cache')) {\r\n                    db.createObjectStore('dss-cache', {\r\n                        autoIncrement: false\r\n                    });\r\n                }\r\n            };\r\n        });\r\n    }\r\n    async add(key, value) {\r\n        if (this._db == null) {\r\n            return;\r\n        }\r\n        await new Promise((resolve) => {\r\n            let tx = this._db.transaction(['dss-cache'], 'readwrite');\r\n            let store = tx.objectStore('dss-cache');\r\n            var putRequest = store.put(value, key);\r\n            putRequest.onsuccess = () => {\r\n                console.log(`[Storage] Stored object in ${key}`);\r\n                resolve();\r\n            };\r\n            putRequest.onerror = (event) => {\r\n                console.error(`[Storage] Can't store value in cache:`, event);\r\n                resolve();\r\n            };\r\n        });\r\n    }\r\n    async get(key) {\r\n        if (this._db == null) {\r\n            return null;\r\n        }\r\n        return await new Promise((resolve) => {\r\n            let tx = this._db.transaction(['dss-cache'], 'readwrite');\r\n            let store = tx.objectStore('dss-cache');\r\n            var getRequest = store.get(key);\r\n            getRequest.onsuccess = (event) => {\r\n                resolve(event?.target.result);\r\n            };\r\n            getRequest.onerror = (event) => {\r\n                console.error(`[Storage] Can't retrieve ${key} from cache`, event);\r\n                resolve(null);\r\n            };\r\n        });\r\n    }\r\n    async delete(key) {\r\n        if (this._db == null) {\r\n            return;\r\n        }\r\n        await new Promise((resolve) => {\r\n            let tx = this._db.transaction(['dss-cache'], 'readwrite');\r\n            let store = tx.objectStore('dss-cache');\r\n            let deleteRequest = store.delete(key);\r\n            deleteRequest.onsuccess = () => {\r\n                console.log(`[Storage] Deleted key ${key}`);\r\n                resolve();\r\n            };\r\n            deleteRequest.onerror = (event) => {\r\n                console.error(`[Storage] Can't delete ${key} from cache`, event);\r\n                resolve();\r\n            };\r\n        });\r\n    }\r\n    async clear() {\r\n        if (this._db == null) {\r\n            return;\r\n        }\r\n        await new Promise((resolve) => {\r\n            let tx = this._db.transaction(['dss-cache'], 'readwrite');\r\n            let store = tx.objectStore('dss-cache');\r\n            const clearRequest = store.clear();\r\n            clearRequest.onsuccess = () => {\r\n                console.log(`[Storage] Cleared IndexedDB table`);\r\n                resolve();\r\n            };\r\n            clearRequest.onerror = (event) => {\r\n                console.error(`[Storage] Can't clear storage`, event);\r\n                resolve();\r\n            };\r\n        });\r\n    }\r\n}\n\nclass DefaultCache {\r\n    storage;\r\n    pendingOdataRequest;\r\n    constructor() {\r\n        this.storage = new Storage();\r\n        this.pendingOdataRequest = new Map();\r\n    }\r\n    /**\r\n     * Checks whether a pending response is registered for the given request\r\n     *\r\n     * @param item The request identifier\r\n     * @returns True if a pending response is registered\r\n     */\r\n    hasPendingResponse(item) {\r\n        return this.pendingOdataRequest.has(item.hash);\r\n    }\r\n    /**\r\n     * Returns the pending response for the given request\r\n     *\r\n     * @param item The item for which the promise response should be returned\r\n     * @returns The pending response promise\r\n     */\r\n    getPendingResponse(item) {\r\n        return this.pendingOdataRequest.get(item.hash);\r\n    }\r\n    /**\r\n     * Adds the response promise to the pending response dictionary\r\n     *\r\n     * @param item The unique identifier\r\n     * @param promise Associated promise of the unique identifier\r\n     */\r\n    registerPendingRequest(item, promise) {\r\n        promise.then(() => {\r\n            console.log(`[FrontendCache] Deleting pending response: \"${item.identifier}\"`);\r\n            this.pendingOdataRequest.delete(item.hash);\r\n        });\r\n        this.pendingOdataRequest.set(item.hash, promise);\r\n    }\r\n    /**\r\n     * Adds a given @see CacheItem to the @see SessionStorage\r\n     *\r\n     * @param item The item that shall be cached\r\n     */\r\n    async addToCache(item) {\r\n        await this._setItem(item.hash, item);\r\n    }\r\n    /**\r\n     * Checks if a given @see CacheItem is present in the session storage and is not expired\r\n     *\r\n     * @param item The cache item\r\n     * @returns true if the cache item exists and is not expired yet. Otherwise false.\r\n     */\r\n    async getCached(item) {\r\n        const currentTimestamp = new Date().getTime();\r\n        try {\r\n            const value = await this.getItemByKey(item.hash);\r\n            if (value !== null && value !== undefined && value.expireOn !== null) {\r\n                if (value.expireOn > currentTimestamp)\r\n                    return value;\r\n                console.log(`[FrontendCache] Item Expired: \"${item.identifier}\"`);\r\n                await this.storage.delete(item.hash);\r\n                return null;\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    async clear() {\r\n        await this.storage.clear();\r\n    }\r\n    /**\r\n     * Gets a value from the session storage with the given @see key\r\n     *\r\n     * @param key The cache key\r\n     * @returns The cached item\r\n     */\r\n    async getItemByKey(key) {\r\n        try {\r\n            const value = await this.storage.get(key);\r\n            return JSON.parse(value);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Adds an item to the session storage\r\n     *\r\n     * @param key The cache item key\r\n     * @param value The item to cache\r\n     */\r\n    async _setItem(key, value) {\r\n        await this.storage.add(key, value);\r\n        console.log(`[FrontendCache] Saved to Cache: \"${value.identifier}\"`);\r\n    }\r\n}\r\nvar cacheWindow = window;\r\ntry {\r\n    // @ts-ignore\r\n    cacheWindow.top.defaultDSSCacheInstance = cacheWindow.top.defaultDSSCacheInstance;\r\n    // @ts-ignore\r\n    cacheWindow = window.top;\r\n}\r\ncatch (error) {\r\n    // swallow\r\n}\r\n// We need an object that is singleton for Ribbon and Form code. That's why we are attaching it to the window object.\r\nif (cacheWindow.defaultDSSCacheInstance === undefined) {\r\n    cacheWindow.defaultDSSCacheInstance = new DefaultCache();\r\n}\r\nconst CacheInstance = cacheWindow.defaultDSSCacheInstance;\n\n/**\r\n * Enum for ODataResponse type\r\n *\r\n */\r\nvar ODataResponseTypes;\r\n(function (ODataResponseTypes) {\r\n    ODataResponseTypes[ODataResponseTypes[\"CreatedEntity\"] = 0] = \"CreatedEntity\";\r\n    ODataResponseTypes[ODataResponseTypes[\"RetrieveEntities\"] = 1] = \"RetrieveEntities\";\r\n    ODataResponseTypes[ODataResponseTypes[\"DeletedEntity\"] = 2] = \"DeletedEntity\";\r\n    ODataResponseTypes[ODataResponseTypes[\"UpdatedEntity\"] = 3] = \"UpdatedEntity\";\r\n    ODataResponseTypes[ODataResponseTypes[\"AssociatedEntity\"] = 4] = \"AssociatedEntity\";\r\n    ODataResponseTypes[ODataResponseTypes[\"DisassociatedEntity\"] = 5] = \"DisassociatedEntity\";\r\n})(ODataResponseTypes || (ODataResponseTypes = {}));\n\nclass ODataQueryResponseMapper {\r\n    _rawResponse;\r\n    _selectAttributes;\r\n    _selectionMode;\r\n    /**\r\n     * Creates a new instance\r\n     *\r\n     * @param rawResponse The raw odata response\r\n     * @param selectAttributes The attributes requested in the query\r\n     * @param selectionMode The selection mode used (SelectSingle|SelectMultiple)\r\n     */\r\n    constructor(rawResponse, selectAttributes, selectionMode) {\r\n        this._rawResponse = rawResponse;\r\n        this._selectAttributes = selectAttributes;\r\n        this._selectionMode = selectionMode;\r\n    }\r\n    /**\r\n     * Maps the response. Works for [SelectSingle|SelectMultiple]\r\n     */\r\n    async getMappedEntity() {\r\n        if (this._selectionMode === ODataQueryBuilderMode.SelectMultiple)\r\n            return this._rawResponse.value.map((args) => this._mapEntity(args));\r\n        return this._mapEntity(this._rawResponse);\r\n    }\r\n    /**\r\n     * Maps a given entity\r\n     *\r\n     * @param entity The odata json response\r\n     */\r\n    _mapEntity(entity) {\r\n        const result = {};\r\n        const localAttributes = this._selectAttributes.filter(a => !a.relation);\r\n        const relationAttributes = this._selectAttributes.filter(a => a.relation);\r\n        const groupedRelations = this._groupRelations(relationAttributes);\r\n        this._mapAttributes(localAttributes, entity, result);\r\n        this._mapRelations(groupedRelations, entity, result);\r\n        return result;\r\n    }\r\n    /**\r\n     * Groups the given relation attributes by the relation name.\r\n     *\r\n     * @param relationAttributes\r\n     */\r\n    _groupRelations(relationAttributes) {\r\n        const groupedRelations = {};\r\n        for (const attr of relationAttributes) {\r\n            if (attr.relation != null) {\r\n                if (!groupedRelations[attr.relation])\r\n                    groupedRelations[attr.relation] = [];\r\n                groupedRelations[attr.relation].push(attr);\r\n            }\r\n        }\r\n        return groupedRelations;\r\n    }\r\n    /**\r\n     * Iterates over the relations and map the using  @see {_mapRelation}\r\n     *\r\n     * @param {Object.<>} groupedRelations The grouped relations returned by @see {_groupRelations}\r\n     * @param {*} entity The json odata response\r\n     * @param {*} result The mapped result object\r\n     */\r\n    _mapRelations(groupedRelations, entity, result) {\r\n        for (const relName in groupedRelations.keys) {\r\n            const attributeList = groupedRelations[relName];\r\n            if (attributeList == null)\r\n                throw `[ODataQueryBuilder._mapRelations] No attributes found for relation ${relName}`;\r\n            this._mapRelation(attributeList, relName, entity, result);\r\n        }\r\n    }\r\n    /**\r\n     * Maps a single relation. Works with [OneToMany|ManyToOne|ManyToMany] relations.\r\n     *\r\n     * @param {} attributeList The attributes to map\r\n     * @param {string} relName The relation name\r\n     * @param {*} entity The odata json response\r\n     * @param {*} result The mapped result object\r\n     */\r\n    _mapRelation(attributeList, relName, entity, result) {\r\n        const sourceValues = entity[relName];\r\n        if (sourceValues instanceof Array)\r\n            this._mapManyToManyRelationship(result, relName, attributeList, sourceValues);\r\n        else\r\n            this._mapOneToManyRelationship(result, relName, attributeList, sourceValues);\r\n    }\r\n    /**\r\n     * Maps a OneToMany relationship\r\n     *\r\n     * @param {*} result The mapped result object\r\n     * @param {string} relName The relation name\r\n     * @param {Array<ODataAttributeBase>} attributeList The attributes to map\r\n     * @param {*} sourceValues The odata values for this relation\r\n     */\r\n    _mapOneToManyRelationship(result, relName, attributeList, sourceValues) {\r\n        result[relName] = {};\r\n        this._mapAttributes(attributeList, sourceValues, result.get(relName));\r\n    }\r\n    /**\r\n     * Maps a ManyToMany relationship\r\n     *\r\n     * @param {*} result The mapped result object\r\n     * @param {string} relName The relation name\r\n     * @param {Array<ODataAttributeBase>} attributeList The attributes to map\r\n     * @param {*} sourceValues The odata values for this relation\r\n     */\r\n    _mapManyToManyRelationship(result, relName, attributeList, sourceValues) {\r\n        const relations = new Array();\r\n        for (const sourceValue of sourceValues) {\r\n            const relation = new Map();\r\n            this._mapAttributes(attributeList, sourceValue, relation);\r\n            relations.push(relation);\r\n        }\r\n        result[relName] = relations;\r\n    }\r\n    /**\r\n     * Maps the given attributes onto the result object\r\n     *\r\n     * @param localAttributes The attributes to map\r\n     * @param entity The odata json response\r\n     * @param result The result object to which the properties will be mapped\r\n     */\r\n    _mapAttributes(localAttributes, entity, result) {\r\n        for (const attribute of localAttributes) {\r\n            const converted = this._convert(attribute, entity);\r\n            if (attribute instanceof PicklistODataAttribute) {\r\n                // We need this block to be backwards compatible!\r\n                // TODO: Remove with next major release\r\n                result[`${attribute.attributeName}_FormattedValue`] = converted.name;\r\n                result[attribute.attributeName] = converted.value;\r\n            }\r\n            else {\r\n                result[attribute.attributeName] = converted;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Converts the given attribute of the odata entity into the target format\r\n     *\r\n     * @param attribute The odata attribute\r\n     * @param entity The odata json entity\r\n     */\r\n    _convert(attribute, entity) {\r\n        const mainAnnotation = attribute.selector;\r\n        if (attribute instanceof LookupODataAttribute ||\r\n            attribute instanceof OwnerODataAttribute ||\r\n            attribute instanceof CustomerODataAttribute)\r\n            return LookupConverter.createAttributeLookupFromODataResponse(entity, mainAnnotation);\r\n        if (attribute instanceof PicklistODataAttribute)\r\n            return PicklistConverter.createAttributeLookupFromODataResponse(entity, mainAnnotation);\r\n        if (attribute instanceof DateTimeODataAttribute)\r\n            return new Date(entity[mainAnnotation]);\r\n        if (entity[mainAnnotation] != null)\r\n            return entity[mainAnnotation];\r\n        return null;\r\n    }\r\n}\n\nclass ODataResponse {\r\n    type;\r\n    headers;\r\n    json;\r\n    /**\r\n     * Creates a new ODataResponse class\r\n     *\r\n     * @param type The odata response type\r\n     * @param headers The odata response headers\r\n     * @param json The json value of the response\r\n     */\r\n    constructor(type, headers, json) {\r\n        this.type = type;\r\n        this.headers = headers;\r\n        this.json = json;\r\n    }\r\n    static async create(type, response) {\r\n        const json = await response.json();\r\n        const headers = response.headers;\r\n        return new ODataResponse(type, headers, json);\r\n    }\r\n    /**\r\n     * Get the fetch response result as json\r\n     *\r\n     * @returns {Promise<Object>} The response json object\r\n     */\r\n    async getJson() {\r\n        return Promise.resolve(this.json);\r\n    }\r\n    /**\r\n     * Get the mapped response entity\r\n     *\r\n     * @param selectAttributes The attributes requested in the query\r\n     * @param selectionMode The selection mode used (SelectSingle|SelectMultiple)\r\n     * @returns The mapped response\r\n     */\r\n    async getMapped(selectAttributes, selectionMode) {\r\n        const json = await this.getJson();\r\n        const mapper = new ODataQueryResponseMapper(json, selectAttributes, selectionMode);\r\n        return await mapper.getMappedEntity();\r\n    }\r\n    /**\r\n     * In case of a CreatedEntity response this will return the id of the entity\r\n     *\r\n     * @returns {string} The guid without \"{\" and \"}\"\r\n     */\r\n    get id() {\r\n        if (this.type !== ODataResponseTypes.CreatedEntity)\r\n            throw new Error(\"The id can only be retrieved for CreatedEntity response!\");\r\n        return this._getEntityIdFromResponseHeader();\r\n    }\r\n    /**\r\n     * Gets the entity id from the response header\r\n     *\r\n     * @param response Odata response\r\n     */\r\n    _getEntityIdFromResponseHeader() {\r\n        const header = this.headers.get(\"OData-EntityId\");\r\n        if (header == null)\r\n            return \"\";\r\n        const regExp = /\\(([^)]+)\\)/;\r\n        const matches = regExp.exec(header);\r\n        if (matches == null)\r\n            return \"\";\r\n        Logger.log(`Created Entity Id: ${matches[1]}`, LogLevel.Information);\r\n        return matches[1];\r\n    }\r\n}\n\nclass ODataError {\r\n    error;\r\n    /**\r\n     * Creates a new ODataError class\r\n     *\r\n     * @param error The error thrown from fetch\r\n     */\r\n    constructor(error) {\r\n        if (error instanceof String)\r\n            this.error = error;\r\n        else {\r\n            this.error = error.message;\r\n        }\r\n    }\r\n}\n\nclass ODataFailure {\r\n    type;\r\n    response;\r\n    /**\r\n     * Creates a new ODataResponse class\r\n     *\r\n     * @param type The odata response type\r\n     * @param response The response from fetch\r\n     */\r\n    constructor(type, response) {\r\n        this.type = type;\r\n        this.response = response;\r\n    }\r\n}\n\nclass CacheItem {\r\n    expireOn;\r\n    result;\r\n    hash;\r\n    identifier;\r\n    /**\r\n     * Creates a CacheItem with the given parameters\r\n     *\r\n     * @param request The fetch request\r\n     * @param expireOn The cache expire time in ms since epoche\r\n     * @param result Tje\r\n     */\r\n    constructor(request, expireOn, result) {\r\n        this.expireOn = expireOn;\r\n        this.result = result;\r\n        this.hash = this._calculateRequestHash(request);\r\n        this.identifier = this._buildIdentifier(request);\r\n    }\r\n    _buildIdentifier(request) {\r\n        if (request.body === null)\r\n            return `HASH: ${this.hash}, URL: ${request.url}`;\r\n        return `HASH: ${this.hash}, URL: \"${request.url}\", Data: \"${request.body}\"`;\r\n    }\r\n    _calculateRequestHash(request) {\r\n        let str = request.url;\r\n        if (request.body !== null)\r\n            str = `${str}||${request.body}`;\r\n        return this._hash(str);\r\n    }\r\n    _hash(value) {\r\n        let hash = 0;\r\n        let i = value.length;\r\n        while (i > 0) {\r\n            hash = (hash << 5) - hash + value.charCodeAt(--i) | 0;\r\n        }\r\n        return hash.toString();\r\n    }\r\n}\n\n// global Request, fetch\r\nclass ODataRequest {\r\n    webApiUrl;\r\n    static ODataApiVersion = \"v9.1\";\r\n    /**\r\n     * Creates a new ODataRequest\r\n     *\r\n     * @param globalContext The Xrm context\r\n     */\r\n    constructor(globalContext) {\r\n        this.webApiUrl = `${globalContext.getClientUrl()}/api/data/${ODataRequest.ODataApiVersion}/`;\r\n    }\r\n    /**\r\n     * Builds a new ODataRequest\r\n     *\r\n     * @param globalContext The Xrm context\r\n     */\r\n    static build(globalContext) {\r\n        return new ODataRequest(globalContext);\r\n    }\r\n    /**\r\n     * Creates an entity\r\n     *\r\n     * @param entity The entity object\r\n     * @param pluralEntitySchemaName The plural entity schema name\r\n     * @param expireOn The cache expire time in ms from epoche\r\n     * @param returnRepresentation If true the created entity will be returned\r\n     * @param returnQuery The query to determine which items to return (starting with \"?\")\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async create(entity, pluralEntitySchemaName, expireOn, returnRepresentation, returnQuery) {\r\n        const jsonEntity = JSON.stringify(entity);\r\n        const command = this.webApiUrl + pluralEntitySchemaName + returnQuery;\r\n        let prefer = \"\";\r\n        if (returnRepresentation)\r\n            prefer = \"return=representation\";\r\n        const headers = new Headers();\r\n        headers.append(\"Content-Type\", \"application/json\");\r\n        headers.append(\"Accept\", \"application/json\");\r\n        headers.append(\"Prefer\", prefer);\r\n        const request = new Request(command, {\r\n            credentials: \"same-origin\",\r\n            method: \"POST\",\r\n            body: jsonEntity,\r\n            headers: headers\r\n        });\r\n        return await this._getCachedResultOrExecuteRequest(request, ODataResponseTypes.CreatedEntity, pluralEntitySchemaName, expireOn);\r\n    }\r\n    /**\r\n     * Retrieves entities\r\n     *\r\n     * @param query The odata query\r\n     * @param expireOn The cache expire time in ms from epoche\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async retrieve(query, expireOn) {\r\n        const command = this.webApiUrl + query;\r\n        const request = new Request(command, {\r\n            method: \"GET\",\r\n            credentials: \"same-origin\",\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\",\r\n                Accept: \"application/json\",\r\n                Prefer: \"odata.include-annotations=\\\"*\\\"\",\r\n            }),\r\n        });\r\n        return await this._getCachedResultOrExecuteRequest(request, ODataResponseTypes.RetrieveEntities, query, expireOn);\r\n    }\r\n    /**\r\n     * Deletes an entity by id\r\n     *\r\n     * @param id The id of the entitiy to delete\r\n     * @param pluralEntitySchemaName The plural entitiy schema name\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async deleteEntity(id, pluralEntitySchemaName) {\r\n        const command = `${this.webApiUrl + pluralEntitySchemaName}(${id})`;\r\n        try {\r\n            const response = await fetch(command, {\r\n                method: \"DELETE\",\r\n                credentials: \"same-origin\",\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                    \"X-HTTP-Method\": \"DELETE\",\r\n                }),\r\n            });\r\n            return await this._processResult(response, ODataResponseTypes.DeletedEntity);\r\n        }\r\n        catch (e) {\r\n            throw new ODataError(e);\r\n        }\r\n    }\r\n    /**\r\n     * Updates an entity\r\n     *\r\n     * @param entity The entity object\r\n     * @param id The id of the entitiy to update\r\n     * @param pluralEntitySchemaName The plural entitiy schema name\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async update(entity, id, pluralEntitySchemaName) {\r\n        const jsonEntity = JSON.stringify(entity);\r\n        const command = `${this.webApiUrl + pluralEntitySchemaName}(${id})`;\r\n        try {\r\n            const response = await fetch(command, {\r\n                method: \"PATCH\",\r\n                credentials: \"same-origin\",\r\n                body: jsonEntity,\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                }),\r\n            });\r\n            return await this._processResult(response, ODataResponseTypes.UpdatedEntity);\r\n        }\r\n        catch (e) {\r\n            throw new ODataError(e);\r\n        }\r\n    }\r\n    /**\r\n     * Associate two entities\r\n     *\r\n     * @param parentId The id of the parent entity\r\n     * @param pluralParentType The plural name of the parent entity\r\n     * @param relationshipName The relationship name\r\n     * @param childId The id of the child entity\r\n     * @param pluralChildType The plural name of the child entity\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async associate(parentId, pluralParentType, relationshipName, childId, pluralChildType) {\r\n        const jsonEntity = JSON.stringify({ \"@odata.id\": `${this.webApiUrl + pluralChildType}(${childId})` });\r\n        const command = `${this.webApiUrl + pluralParentType}(${parentId})/${relationshipName}/$ref`;\r\n        try {\r\n            const response = await fetch(command, {\r\n                method: \"POST\",\r\n                credentials: \"same-origin\",\r\n                body: jsonEntity,\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                }),\r\n            });\r\n            return await this._processResult(response, ODataResponseTypes.AssociatedEntity);\r\n        }\r\n        catch (e) {\r\n            throw new ODataError(e);\r\n        }\r\n    }\r\n    /**\r\n     * Disassociates two entities\r\n     *\r\n     * @param parentId The id of the parent entity\r\n     * @param pluralParentType The plural name of the parent entity\r\n     * @param relationshipName The relationship name\r\n     * @param childId The id of the child entity\r\n     * @returns Returns a promise which resolves to a ODataResponse\r\n     */\r\n    async disassociate(parentId, pluralParentType, relationshipName, childId) {\r\n        const command = `${this.webApiUrl + pluralParentType}(${parentId})/${relationshipName}(${childId})/$ref`;\r\n        try {\r\n            const response = await fetch(command, {\r\n                method: \"DELETE\",\r\n                credentials: \"same-origin\",\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\",\r\n                    Accept: \"application/json\",\r\n                }),\r\n            });\r\n            return await this._processResult(response, ODataResponseTypes.DisassociatedEntity);\r\n        }\r\n        catch (e) {\r\n            throw new ODataError(e);\r\n        }\r\n    }\r\n    /**\r\n     * Handles a fetch response\r\n     *\r\n     * @param response The fetch response\r\n     * @param type The odata response type\r\n     * @returns The correct odata result\r\n     */\r\n    async _processResult(response, type) {\r\n        if (response.ok)\r\n            return await ODataResponse.create(type, response);\r\n        throw new ODataFailure(type, response);\r\n    }\r\n    /**\r\n     * Executes the given fetch requests and adds the result to the cache if a expireOn value is set\r\n     *\r\n     * @param request The fetch request to execute\r\n     * @param requestType The response type\r\n     * @param identifier An identifier of the request\r\n     * @param expireOn The cache expire time in ms since epoche\r\n     * @returns The OData result\r\n     */\r\n    async _executeRequest(request, requestType, identifier, expireOn) {\r\n        try {\r\n            const result = await fetch(request.url, request);\r\n            const processedResult = await this._processResult(result, requestType);\r\n            if (expireOn != null) {\r\n                const cacheItem = new CacheItem(request, expireOn, processedResult);\r\n                await CacheInstance.addToCache(cacheItem);\r\n                console.log(`[FrontendCache] Saved \"${identifier}\" to cache`);\r\n            }\r\n            return processedResult;\r\n        }\r\n        catch (e) {\r\n            throw new ODataError(e);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the given request is already cached. If it it the cached result will be returned. Otherwise the request will be executed.\r\n     *\r\n     * @param request The fetch request_executeRequest\r\n     * @param requestType The response type\r\n     * @param identifier An identifier of the request\r\n     * @param expireOn The cache expire time in ms since epoche\r\n     * @returns The OData response\r\n     */\r\n    async _getCachedResultOrExecuteRequest(request, requestType, identifier, expireOn) {\r\n        if (expireOn === undefined)\r\n            return await this._executeRequest(request, requestType, identifier);\r\n        const cacheItem = new CacheItem(request, expireOn);\r\n        if (CacheInstance.hasPendingResponse(cacheItem)) {\r\n            Logger.log(`[FrontendCache] \"${identifier}\" has a pending response. Returning Promise!`, LogLevel.Verbose);\r\n            return await CacheInstance.getPendingResponse(cacheItem);\r\n        }\r\n        const cachedItem = await CacheInstance.getCached(cacheItem);\r\n        if (cachedItem?.result) {\r\n            Logger.log(`[FrontendCache] Serving \"${identifier}\" from cache`, LogLevel.Information);\r\n            return new ODataResponse(cachedItem.result.type, cachedItem.result.headers, cachedItem.result.json);\r\n        }\r\n        return await this._executeRequest(request, requestType, identifier, expireOn);\r\n    }\r\n}\n\nclass ODataQueryParameters {\r\n    selectionMode;\r\n    entityId;\r\n    entity;\r\n    expanders;\r\n    limit;\r\n    primaryAttributes;\r\n    orderByAttributes;\r\n    filters;\r\n    constructor(entity) {\r\n        this.entity = entity;\r\n        this.expanders = new Map();\r\n        this.selectionMode = ODataQueryBuilderMode.Undefined;\r\n        this.limit = 0;\r\n        this.primaryAttributes = [];\r\n        this.orderByAttributes = [];\r\n        this.filters = [];\r\n    }\r\n    isSelectSingle() { return this.selectionMode === ODataQueryBuilderMode.SelectSingle; }\r\n    isSelectMultiple() { return this.selectionMode === ODataQueryBuilderMode.SelectMultiple; }\r\n    hasPrimaryAttributes() { return this.primaryAttributes instanceof Array && this.primaryAttributes.length > 0; }\r\n    hasOrderByAttributes() { return this.orderByAttributes instanceof Array && this.orderByAttributes.length > 0; }\r\n    hasExpanders() { return this.expanders.keys.length > 0; }\r\n    hasFilters() { return this.filters instanceof Array && this.filters.length > 0; }\r\n    hasLimit() { return this.limit !== null && this.limit !== undefined && this.limit !== 0; }\r\n}\n\nclass ODataQueryBuilder {\r\n    _queryParameters;\r\n    _entityInstance;\r\n    /**\r\n     * PRIVATE CONSTRUCTOR! Use \"ODataQueryBuilder.for(entity)\" instead!\r\n     *\r\n     * @private\r\n     * @param entity The primary entity type for the query\r\n     */\r\n    constructor(entity) {\r\n        this._queryParameters = new ODataQueryParameters(entity);\r\n        this._entityInstance = entity;\r\n    }\r\n    /**\r\n     * Executes a RetrieveAll odata call\r\n     *\r\n     * @param globalContext The xrm context\r\n     * @param expireOn \t\tThe cache expire time in ms from epoche\r\n     * @returns The odata result\r\n     */\r\n    async execute(globalContext, expireOn) {\r\n        if (this._queryParameters.selectionMode === ODataQueryBuilderMode.Undefined) {\r\n            this._queryParameters.selectionMode = ODataQueryBuilderMode.SelectMultiple;\r\n        }\r\n        const odataRequest = ODataRequest.build(globalContext);\r\n        const query = this.build();\r\n        const response = await odataRequest.retrieve(query, expireOn);\r\n        return response.getMapped(this._queryParameters.primaryAttributes, this._queryParameters.selectionMode);\r\n    }\r\n    /**\r\n     * Builds and returns the query string\r\n     */\r\n    build() {\r\n        const logic = new ODataQueryBuilderLogic(this._queryParameters);\r\n        return logic.buildQueryString();\r\n    }\r\n    /**\r\n     * Set SelectSingle mode and the entity guid\r\n     *\r\n     * @param guid The id of the entity to retrieve\r\n     */\r\n    selectSingle(guid) {\r\n        this._validateUsage(ODataQueryBuilderMode.SelectSingle);\r\n        this._queryParameters.limit = 0;\r\n        this._queryParameters.entityId = guid;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the filters for the query\r\n     *\r\n     * @param whereFunction The filters to apply to the query\r\n     * @returns Current query builder instance\r\n     */\r\n    where(whereFunction) {\r\n        const filters = whereFunction(this._entityInstance);\r\n        this._validateUsage(ODataQueryBuilderMode.SelectMultiple);\r\n        this._validateAttributesInput(filters, \"where\");\r\n        this._queryParameters.filters = filters;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the maximum amount of entities to retrieve\r\n     *\r\n     * @param limit The maximum amount of entities to retrieve\r\n     * @returns Current query builder instance\r\n     */\r\n    take(limit) {\r\n        this._validateUsage(ODataQueryBuilderMode.SelectMultiple);\r\n        this._queryParameters.limit = limit;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the orderby attributes\r\n     *\r\n     * @param orderFunction The attributes used for ordering\r\n     * @returns Current query builder instance\r\n     */\r\n    orderby(orderFunction) {\r\n        const attributes = orderFunction(this._entityInstance);\r\n        this._validateUsage(ODataQueryBuilderMode.SelectMultiple);\r\n        this._validateAttributesInput(attributes, \"orderby\");\r\n        this._queryParameters.orderByAttributes = attributes;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the attributes to retrieve\r\n     *\r\n     * @param selectFunction The attributes to select\r\n     * @returns Current query builder instance\r\n     */\r\n    select(selectFunction) {\r\n        const attributes = selectFunction(this._entityInstance);\r\n        this._validateAttributesInput(attributes, \"select\");\r\n        this._queryParameters.primaryAttributes = attributes;\r\n        return this;\r\n    }\r\n    _validateUsage(selectionMode) {\r\n        if (this._queryParameters.selectionMode === selectionMode)\r\n            return;\r\n        if (this._queryParameters.selectionMode === ODataQueryBuilderMode.Undefined) {\r\n            this._queryParameters.selectionMode = selectionMode;\r\n            return;\r\n        }\r\n        throw \"It is not allowed to mix methods of different operation modes!\";\r\n    }\r\n    _validateAttributesInput(possibleArray, funcName) {\r\n        const arrLength = this._getArrayLength(possibleArray);\r\n        if (arrLength < 1)\r\n            throw `Error while using QueryBuilder: Method '${funcName}()' needs a not empty array as input!`;\r\n        for (const item of possibleArray) {\r\n            if (!this._isAttribute(item) && !this._isFilter(item) && !this._isOrder(item)) {\r\n                throw `Error while using QueryBuilder: The input array of '${funcName}()' does not contain the right type!`;\r\n            }\r\n        }\r\n    }\r\n    _isAttribute(attribute) {\r\n        return attribute instanceof ODataAttributeBase;\r\n    }\r\n    _isFilter(attribute) {\r\n        return attribute instanceof ODataAttributeFilterBase ||\r\n            attribute instanceof FilterValue ||\r\n            attribute instanceof FilterGroup;\r\n    }\r\n    _isOrder(attribute) {\r\n        return attribute instanceof ODataAttributeOrder;\r\n    }\r\n    _getArrayLength(obj) {\r\n        return obj?.length ? obj.length : -1;\r\n    }\r\n    /**\r\n     * Creates a new query builder for a given entity\r\n     *\r\n     * @returns The query builder\r\n     */\r\n    static for(type) {\r\n        return new ODataQueryBuilder(new type());\r\n    }\r\n}\n\nclass ODataCommandResponse {\r\n    commandName;\r\n    parmeter;\r\n    result;\r\n    constructor(commandName, commandParameter, commandResult) {\r\n        this.commandName = commandName;\r\n        this.parmeter = commandParameter;\r\n        this.result = commandResult;\r\n    }\r\n}\n\nclass ODataCommand {\r\n    request;\r\n    constructor(globalContext) {\r\n        this.request = new ODataRequest(globalContext);\r\n    }\r\n    /**\r\n     * Handles the result\r\n     */\r\n    async _handleResult(response) {\r\n        const data = await response.getJson();\r\n        const paramJson = JSON.parse(data.adssf_parameter);\r\n        const resultJson = JSON.parse(data.adssf_result);\r\n        return new ODataCommandResponse(data.adssf_commandname, paramJson, resultJson);\r\n    }\r\n    /**\r\n     * Executes the command and returns the result\r\n     */\r\n    async execute(commandName, parameter, expireOn) {\r\n        const jsonParameter = JSON.stringify(parameter);\r\n        const entity = {\r\n            adssf_commandname: commandName,\r\n            adssf_parameter: jsonParameter,\r\n        };\r\n        const response = await this.request.create(entity, \"adssf_commands\", expireOn, true, \"?$select=adssf_commandname,adssf_parameter,adssf_result\");\r\n        return await this._handleResult(response);\r\n    }\r\n}\n\nclass Expires {\r\n    static inDays(days) {\r\n        return this._getCurrentTimestamp() + days * 24 * 60 * 60 * 1000;\r\n    }\r\n    static inHours(hours) {\r\n        return this._getCurrentTimestamp() + hours * 60 * 60 * 1000;\r\n    }\r\n    static inMinutes(minutes) {\r\n        return this._getCurrentTimestamp() + minutes * 60 * 1000;\r\n    }\r\n    static inSeconds(seconds) {\r\n        return this._getCurrentTimestamp() + seconds * 1000;\r\n    }\r\n    static atMidnight() {\r\n        const cDate = new Date();\r\n        const cDay = cDate.getDate();\r\n        cDate.setHours(0, 0, 0, 0);\r\n        cDate.setDate(cDay + 1);\r\n        return cDate.getTime();\r\n    }\r\n    static _getCurrentTimestamp() {\r\n        return new Date().getTime();\r\n    }\r\n}\n\nclass CachedRibbonRuleEntry {\r\n    _finishedHandler;\r\n    _functionId;\r\n    _isExecuting;\r\n    _result;\r\n    constructor(functionId, resultPromise, finishedHandler) {\r\n        this._finishedHandler = finishedHandler;\r\n        this._functionId = functionId;\r\n        this._isExecuting = true;\r\n        this._result = null;\r\n        resultPromise\r\n            .then(result => this._setResult(result), error => this._setError(error));\r\n    }\r\n    get result() {\r\n        return this._result;\r\n    }\r\n    get isExecuting() {\r\n        return this._isExecuting;\r\n    }\r\n    get functionId() {\r\n        return this._functionId;\r\n    }\r\n    _setError(error) {\r\n        console.error(`[Ribbon] rule \"${this._functionId}\" threw an exception!`, error);\r\n        this._result = false;\r\n        this._isExecuting = false;\r\n        this._finishedHandler();\r\n    }\r\n    _setResult(result) {\r\n        this._result = result;\r\n        this._isExecuting = false;\r\n        this._finishedHandler();\r\n    }\r\n}\n\nclass CachedRibbonRuleExecutor {\r\n    _entries;\r\n    _refreshAllRibbons;\r\n    constructor() {\r\n        /** @type {CachedRibbonRuleEntry[]} */\r\n        this._entries = [];\r\n        this._refreshAllRibbons = false;\r\n    }\r\n    /**\r\n     * Clears all cached enable rules\r\n     */\r\n    clearCache() {\r\n        this._entries = [];\r\n    }\r\n    /**\r\n     * Executes an async Enable Rule and caches the result\r\n     *\r\n     * @param dynamicsContext The dynamics context\r\n     * @param ruleFunction The async enable rule function to execute\r\n     * @param functionId An unique name for the function\r\n     * @param A synchronous pre-condition that determines if the cache should be invalidated. Returning true invalidates the cache.\r\n     * @returns {boolean} the cached result\r\n     */\r\n    executeRule(dynamicsContext, ruleFunction, functionId, precondition = false) {\r\n        if (precondition === true) {\r\n            const entry = this._entries\r\n                .find(e => e.functionId === functionId);\r\n            if (entry) {\r\n                const index = this._entries.indexOf(entry);\r\n                this._entries.splice(index, 1);\r\n            }\r\n        }\r\n        const existingEntryOrNull = this._getExistingEntry(functionId);\r\n        if (existingEntryOrNull) {\r\n            if (existingEntryOrNull.result)\r\n                return existingEntryOrNull.result;\r\n            return false;\r\n        }\r\n        const resultPromise = ruleFunction();\r\n        if (resultPromise && typeof resultPromise.then !== \"function\")\r\n            throw new Error(`The enable rule \"${functionId}\" did not return a Promise!`);\r\n        if (!resultPromise)\r\n            throw new Error(`The enable rule \"${functionId}\" did return a null value!`);\r\n        const entry = this._addEntry(dynamicsContext, functionId, resultPromise);\r\n        if (entry.isExecuting === false)\r\n            return entry.result;\r\n        return false;\r\n    }\r\n    _getExistingEntry(functionId) {\r\n        const matching = this._entries\r\n            .filter(e => e.functionId === functionId);\r\n        if (matching.length > 0)\r\n            return matching[0];\r\n        return null;\r\n    }\r\n    _addEntry(dynamicsContext, functionId, resultPromise) {\r\n        const entry = new CachedRibbonRuleEntry(functionId, resultPromise, () => this._handlePromiseResult(dynamicsContext));\r\n        this._entries.push(entry);\r\n        return entry;\r\n    }\r\n    _handlePromiseResult(dynamicsContext) {\r\n        const pendingEntries = this._entries.filter(e => e.isExecuting);\r\n        if (pendingEntries.length === 0) {\r\n            if (dynamicsContext &&\r\n                dynamicsContext.formContext &&\r\n                dynamicsContext.formContext.ui &&\r\n                dynamicsContext.formContext.ui.refreshRibbon) {\r\n                dynamicsContext.formContext.ui.refreshRibbon(this._refreshAllRibbons);\r\n                // @ts-ignore\r\n            }\r\n            else if (window.top.refreshRibbon) {\r\n                // @ts-ignore\r\n                window.top.refreshRibbon();\r\n            }\r\n            else {\r\n                console.log(\"Unable to refresh ribbon as formContext.ui.refreshRibbon and window.top.refreshRibbon are null!\");\r\n            }\r\n        }\r\n    }\r\n}\n\nclass RibbonContext {\r\n    ribbonType;\r\n    commandId;\r\n    primaryEntityTypeCode;\r\n    primaryEntityTypeName;\r\n    firstPrimaryEntityId;\r\n    selectedEntityTypeCode;\r\n    selectedEntityTypeName;\r\n    selectedEntityIds;\r\n    commandProperties;\r\n    selectedControl;\r\n    primaryControl;\r\n    constructor(ribbonType, commandId, primaryEntityTypeCode, primaryEntityTypeName, firstPrimaryEntityId, selectedEntityTypeCode, selectedEntityTypeName, selectedEntityIds, commandProperties, selectedControl, primaryControl) {\r\n        this.ribbonType = ribbonType;\r\n        this.commandId = commandId;\r\n        this.primaryEntityTypeCode = primaryEntityTypeCode;\r\n        this.primaryEntityTypeName = primaryEntityTypeName;\r\n        this.firstPrimaryEntityId = firstPrimaryEntityId;\r\n        this.selectedEntityTypeCode = selectedEntityTypeCode;\r\n        this.selectedEntityTypeName = selectedEntityTypeName;\r\n        this.selectedEntityIds = selectedEntityIds;\r\n        this.commandProperties = commandProperties;\r\n        this.selectedControl = selectedControl;\r\n        this.primaryControl = primaryControl;\r\n    }\r\n}\n\nclass RibbonContractBase {\r\n    cachedRibbonRuleExecutor;\r\n    _registeredActions;\r\n    _registeredRules;\r\n    constructor() {\r\n        this.cachedRibbonRuleExecutor = new CachedRibbonRuleExecutor();\r\n        this._registeredActions = new Map();\r\n        this._registeredRules = new Map();\r\n    }\r\n    /**\r\n     * Executes a Ribbon Rule\r\n     *\r\n     * @param {RibbonContext} ribbonContext\r\n     * @param {DynamicsContext} dynamicsContext\r\n     * @returns {boolean}\r\n     */\r\n    executeRuleInternal(ribbonContext, dynamicsContext) {\r\n        try {\r\n            const registeredRuleNames = Object.keys(this._registeredRules);\r\n            const commandName = ribbonContext.commandId?.toLowerCase();\r\n            for (const key of registeredRuleNames) {\r\n                if (key.toLowerCase() === commandName) {\r\n                    return this._executeMatchingRule(ribbonContext, dynamicsContext, key);\r\n                }\r\n            }\r\n            Logger.log(`Ribbon: Rule ${ribbonContext.commandId} is not registered!`, LogLevel.Error);\r\n            return false;\r\n        }\r\n        catch (ex) {\r\n            Logger.log(ex, LogLevel.Error);\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * Executes a single matching rule\r\n     */\r\n    _executeMatchingRule(ribbonContext, dynamicsContext, key) {\r\n        Logger.log(`[Ribbon] Executing rule \"${ribbonContext.commandId}\"`);\r\n        if (ribbonContext.commandId == null) {\r\n            Logger.log(`[Ribbon] Command id is null. Exiting.\"`);\r\n            return false;\r\n        }\r\n        const rule = this._registeredRules.get(key);\r\n        if (rule == null) {\r\n            Logger.log(`[Ribbon] No rule found for key \"${key}. Returning false.\"`);\r\n            return false;\r\n        }\r\n        const preconditions = rule.precondition !== undefined\r\n            ? rule.precondition(ribbonContext) : undefined;\r\n        if (rule.useCache) {\r\n            const promiseFunction = (() => rule.action(ribbonContext));\r\n            return this.cachedRibbonRuleExecutor\r\n                .executeRule(dynamicsContext, promiseFunction, ribbonContext.commandId, preconditions);\r\n        }\r\n        return /** @type {boolean} */ (rule.action(ribbonContext));\r\n    }\r\n    /**\r\n     * Executes a Ribbon Action\r\n     *\r\n     * @param ribbonContext The ribbon context\r\n     * @returns {*}\r\n     */\r\n    executeActionInternal(ribbonContext) {\r\n        try {\r\n            const registeredActionNames = Object.keys(this._registeredActions);\r\n            const commandName = ribbonContext.commandId?.toLowerCase();\r\n            for (const key of registeredActionNames) {\r\n                if (key.toLowerCase() === commandName) {\r\n                    Logger.log(`[Ribbon] Executing action\"${ribbonContext.commandId}\"`, LogLevel.Verbose);\r\n                    return this._registeredActions.get(key)(ribbonContext);\r\n                }\r\n            }\r\n            Logger.log(`[Ribbon] Action ${ribbonContext.commandId} is not registered!`, LogLevel.Error);\r\n        }\r\n        catch (ex) {\r\n            Logger.log(ex, LogLevel.Error);\r\n        }\r\n    }\r\n}\n\nclass RibbonControllerBase {\r\n    dynamicsContext;\r\n    cachedRibbonRuleExecutor;\r\n    /**\r\n     * Creates a new RibbonControllerBase instance\r\n     *\r\n     * @param dynamicsContext\r\n     * @param cachedRibbonRuleExecutor\r\n     */\r\n    constructor(dynamicsContext, cachedRibbonRuleExecutor) {\r\n        this.dynamicsContext = dynamicsContext;\r\n        this.cachedRibbonRuleExecutor = cachedRibbonRuleExecutor;\r\n    }\r\n}\n\nclass RuleDefinition {\r\n    _useCache = false;\r\n    _preCondition;\r\n    _action;\r\n    get useCache() {\r\n        return this._useCache;\r\n    }\r\n    set useCache(value) {\r\n        this._useCache = value;\r\n    }\r\n    get precondition() {\r\n        return this._preCondition;\r\n    }\r\n    set precondition(value) {\r\n        this._preCondition = value;\r\n    }\r\n    get action() {\r\n        return this._action;\r\n    }\r\n    set action(value) {\r\n        this._action = value;\r\n    }\r\n}\n\nclass ExecutionContextMock {\r\n    _globalContext;\r\n    _formContext;\r\n    constructor(globalContext, formContext) {\r\n        this._globalContext = globalContext;\r\n        this._formContext = formContext;\r\n    }\r\n    getContext() {\r\n        return this._globalContext;\r\n    }\r\n    getFormContext() {\r\n        return this._formContext;\r\n    }\r\n    getDepth() {\r\n        return 0;\r\n    }\r\n    getEventSource() {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    getSharedVariable(key) {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n    setSharedVariable(key, value) {\r\n        throw new Error(\"Not implemented.\");\r\n    }\r\n}\n\nclass ItemCollection {\r\n    _array;\r\n    constructor(array) {\r\n        this._array = array;\r\n    }\r\n    get(input) {\r\n        if (input === undefined || input === null)\r\n            return this._array;\r\n        if (typeof input === \"number\")\r\n            return this._array[input];\r\n        if (typeof input === \"string\") {\r\n            let items = this._array.filter((a) => ((typeof a.getName === \"function\") && a.getName() === input)\r\n                || ((typeof a.getKey === \"function\") && a.getKey() === input));\r\n            return items.length > 0 ? items[0] : null;\r\n        }\r\n    }\r\n    forEach(delegate) {\r\n        this._array.forEach(delegate);\r\n    }\r\n    getLength() {\r\n        return this._array.length;\r\n    }\r\n}\n\n/**\r\n * @implements {Xrm.Controls.StandardControl}\r\n * @implements {Xrm.Controls.Control}\r\n * @implements {Xrm.Controls.UiLabelElement}\r\n * @implements {Xrm.Controls.UiCanGetVisibleElement}\r\n * @implements {Xrm.Controls.UiCanSetVisibleElement}\r\n */\r\nclass ControlMock {\r\n    _controlType;\r\n    _name;\r\n    _label;\r\n    _visible;\r\n    _disabled;\r\n    _controlNotifications;\r\n    _notifications;\r\n    attribute;\r\n    parent;\r\n    constructor(attribute) {\r\n        this._controlType = \"standard\";\r\n        this._name = \"test_control\";\r\n        this._label = \"test_control\";\r\n        this._visible = false;\r\n        this._disabled = false;\r\n        this.parent = null;\r\n        this.attribute = attribute;\r\n        this._controlNotifications = [];\r\n        this._notifications = new Map();\r\n    }\r\n    getVisible() {\r\n        return this._visible;\r\n    }\r\n    setVisible(value) {\r\n        this._visible = value;\r\n    }\r\n    setDisabled(value) {\r\n        this._disabled = value;\r\n    }\r\n    getDisabled() {\r\n        return this._disabled;\r\n    }\r\n    getControlType() {\r\n        return this._controlType;\r\n    }\r\n    getName() {\r\n        return this._name;\r\n    }\r\n    getParent() {\r\n        return this.parent;\r\n    }\r\n    getLabel() {\r\n        return this._label;\r\n    }\r\n    setLabel(label) {\r\n        this._label = label;\r\n    }\r\n    addNotification(notification) {\r\n        if (!this._controlNotifications.includes(notification))\r\n            this._controlNotifications.push(notification);\r\n    }\r\n    clearNotification(uniqueId) {\r\n        this._notifications.clear();\r\n        return true;\r\n    }\r\n    setNotification(message, uniqueId) {\r\n        this._notifications.set(uniqueId, message);\r\n        return true;\r\n    }\r\n    setFocus() {\r\n        return;\r\n    }\r\n    getAttribute() {\r\n        return this.attribute;\r\n    }\r\n}\n\nclass AttributeMock {\r\n    _name;\r\n    _attributeFormat;\r\n    _attributeType;\r\n    _isDirty;\r\n    _requiredLevel;\r\n    _submitMode;\r\n    _value;\r\n    _privilege;\r\n    _addPreSearch;\r\n    _isValid;\r\n    _eventHandlers;\r\n    controls;\r\n    constructor(attributeData) {\r\n        const { name = \"no_name\", format = \"text\", initialValue = null, isDirty = false, requiredLevel = \"none\", submitMode = \"dirty\", type = \"string\", isValid = false, controls = [], privilege = {\r\n            canCreate: true,\r\n            canRead: true,\r\n            canUpdate: true,\r\n        }, } = attributeData;\r\n        this._name = name;\r\n        this._attributeFormat = format;\r\n        this._attributeType = type;\r\n        this._isDirty = isDirty;\r\n        this._requiredLevel = requiredLevel;\r\n        this._submitMode = submitMode;\r\n        this._value = initialValue;\r\n        this._privilege = privilege;\r\n        this._isValid = isValid;\r\n        this._eventHandlers = [];\r\n        controls.forEach(c => c.attribute = this);\r\n        this.controls = new ItemCollection(controls);\r\n    }\r\n    addOnChange(handler) {\r\n        if (!this._eventHandlers.includes(handler))\r\n            this._eventHandlers.push(handler);\r\n    }\r\n    removeOnChange(handler) {\r\n        const index = this._eventHandlers.indexOf(handler);\r\n        if (index >= 0)\r\n            this._eventHandlers.slice(index, 1);\r\n    }\r\n    fireOnChange() {\r\n        for (const handler of this._eventHandlers)\r\n            handler(null);\r\n    }\r\n    getAttributeType() {\r\n        return this._attributeType;\r\n    }\r\n    getFormat() {\r\n        return this._attributeFormat;\r\n    }\r\n    getIsDirty() {\r\n        return this._isDirty;\r\n    }\r\n    getName() {\r\n        return this._name;\r\n    }\r\n    getParent() {\r\n        return null;\r\n    }\r\n    getRequiredLevel() {\r\n        return this._requiredLevel;\r\n    }\r\n    getSubmitMode() {\r\n        return this._submitMode;\r\n    }\r\n    getUserPrivilege() {\r\n        return this._privilege;\r\n    }\r\n    setRequiredLevel(requirementLevel) {\r\n        this._requiredLevel = requirementLevel;\r\n    }\r\n    setSubmitMode(submitMode) {\r\n        this._submitMode = submitMode;\r\n    }\r\n    getValue() {\r\n        return this._value;\r\n    }\r\n    setValue(value) {\r\n        if (value !== this._value) {\r\n            this._value = value;\r\n            this._isDirty = true;\r\n            this.fireOnChange();\r\n        }\r\n    }\r\n    addPreSearch() {\r\n        return this._addPreSearch;\r\n    }\r\n    createNewControl() {\r\n        const contr = new ControlMock(this);\r\n        contr.setLabel(`${this._name}_control`);\r\n        this.controls._array.push(contr);\r\n        return contr;\r\n    }\r\n    setIsValid(isValid, message) {\r\n        this._isValid = isValid;\r\n    }\r\n}\n\nclass LookupControlMock extends ControlMock {\r\n    addOnLookupTagClick(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    removeOnLookupTagClick(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    addPreSearch(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    addCustomFilter(filter, entityLogicalName) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    addCustomView(viewId, entityName, viewDisplayName, fetchXml, layoutXml, isDefault) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getDefaultView() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    removePreSearch(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setDefaultView(viewGuid) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getEntityTypes() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    setEntityTypes(entityLogicalNames) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getAttribute() {\r\n        return this.attribute;\r\n    }\r\n}\n\nclass LookupAttributeMock extends AttributeMock {\r\n    controls;\r\n    constructor(attributeData) {\r\n        super(attributeData);\r\n        this.controls = new ItemCollection([]);\r\n    }\r\n    createNewControl() {\r\n        const contr = new LookupControlMock(this);\r\n        contr.setLabel(`${this.getName()}_control`);\r\n        this.controls._array.push(contr);\r\n        return contr;\r\n    }\r\n    getIsPartyList() {\r\n        return false;\r\n    }\r\n}\n\nclass OptionSetControlMock extends ControlMock {\r\n    addOption(option, index) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    clearOptions() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    removeOption(value) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getAttribute() {\r\n        return this.attribute;\r\n    }\r\n}\n\nclass OptionSetAttributeMock extends AttributeMock {\r\n    _format;\r\n    _initialValue;\r\n    controls;\r\n    options;\r\n    constructor(data) {\r\n        super(data);\r\n        const { initialValue = 0, format = \"language\", } = data;\r\n        this.controls = new ItemCollection([]);\r\n        this.options = [];\r\n        this._initialValue = initialValue;\r\n        this._format = format;\r\n    }\r\n    getInitialValue() {\r\n        return this._initialValue;\r\n    }\r\n    getOption(input) {\r\n        let values;\r\n        if (typeof input === \"number\") {\r\n            values = this.options.filter(o => o.value === input);\r\n        }\r\n        else if (typeof input === \"string\") {\r\n            values = this.options.filter(o => o.text === input);\r\n        }\r\n        return values && values.length && values.length > 0\r\n            ? values[0]\r\n            : null;\r\n    }\r\n    getOptions() {\r\n        return this.options;\r\n    }\r\n    getSelectedOption() {\r\n        return this.getOption(this.getValue());\r\n    }\r\n    getText() {\r\n        const cOption = this.getSelectedOption();\r\n        if (cOption === null)\r\n            return \"\";\r\n        return cOption.text;\r\n    }\r\n    addOnChange(handler) {\r\n        super.addOnChange(handler);\r\n    }\r\n    removeOnChange(handler) {\r\n        super.removeOnChange(handler);\r\n    }\r\n    getFormat() {\r\n        return this._format;\r\n    }\r\n    createNewControl() {\r\n        const contr = new OptionSetControlMock(this);\r\n        contr.setLabel(`${this.getName()}_control`);\r\n        this.controls._array.push(contr);\r\n        return contr;\r\n    }\r\n}\n\nclass FormContextEntityMock {\r\n    _mockData;\r\n    _primaryAttributeName;\r\n    _isDirty;\r\n    _id;\r\n    _logicalName;\r\n    _changeHandlers;\r\n    _postSaveEvents;\r\n    attributes;\r\n    constructor(mockData) {\r\n        this._mockData = mockData;\r\n        this._primaryAttributeName = \"id\";\r\n        this._isDirty = false;\r\n        this._id = Guid.generate();\r\n        this._logicalName = \"account\";\r\n        this._changeHandlers = [];\r\n        this._postSaveEvents = [];\r\n        this.attributes = (new ItemCollection(this._mockData.attributes));\r\n    }\r\n    addOnSave(handler) {\r\n        if (!this._changeHandlers.includes(handler))\r\n            this._changeHandlers.push(handler);\r\n    }\r\n    removeOnSave(handler) {\r\n        const index = this._changeHandlers.indexOf(handler);\r\n        if (index >= 0)\r\n            this._changeHandlers.slice(index, 1);\r\n    }\r\n    addOnPostSave(handler) {\r\n        if (!this._postSaveEvents.includes(handler))\r\n            this._postSaveEvents.push(handler);\r\n    }\r\n    fireOnChange(event) {\r\n        for (const handler of this._changeHandlers) {\r\n            handler(event);\r\n        }\r\n    }\r\n    getDataXml() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getEntityName() {\r\n        return this._logicalName;\r\n    }\r\n    getEntityReference() {\r\n        return {\r\n            id: this._id,\r\n            entityType: this._logicalName,\r\n            name: \"\",\r\n        };\r\n    }\r\n    getId() {\r\n        return this._id;\r\n    }\r\n    getIsDirty() {\r\n        return this._isDirty;\r\n    }\r\n    getPrimaryAttributeValue() {\r\n        return this._primaryAttributeName;\r\n    }\r\n    isValid() {\r\n        return true;\r\n    }\r\n    save(saveMode) {\r\n        this.fireOnChange(null);\r\n    }\r\n}\n\nclass FormContextDataProcessMock {\r\n    _mockData;\r\n    _activeProcess;\r\n    _processInstanceId;\r\n    _activeStage;\r\n    _activePath;\r\n    _selectedStage;\r\n    _onProcessStatusChangeHandlers;\r\n    _onStageChangeHandlers;\r\n    _onStageSelectedHandlers;\r\n    _onPreProcessStatusChangeHandlers;\r\n    _instanceId;\r\n    _status;\r\n    _onPreStageChangeHandlers;\r\n    constructor(mockData) {\r\n        this._mockData = mockData;\r\n        this._onPreStageChangeHandlers = [];\r\n        this._onPreProcessStatusChangeHandlers = [];\r\n        this._onProcessStatusChangeHandlers = [];\r\n        this._onStageChangeHandlers = [];\r\n        this._onStageSelectedHandlers = [];\r\n        this._instanceId = Guid.generate();\r\n    }\r\n    getActiveProcess() {\r\n        return this._activeProcess;\r\n    }\r\n    setActiveProcess(processId, callbackFunction) {\r\n        this._activeProcess = {\r\n            getId() { return processId; },\r\n        };\r\n        if (callbackFunction)\r\n            callbackFunction(\"success\");\r\n    }\r\n    getProcessInstances(callbackFunction) {\r\n        if (callbackFunction)\r\n            callbackFunction(null);\r\n    }\r\n    setActiveProcessInstance(processInstanceId, callbackFunction) {\r\n        this._processInstanceId = processInstanceId;\r\n        if (callbackFunction)\r\n            callbackFunction(\"success\");\r\n    }\r\n    getActiveStage() {\r\n        return this._activeStage;\r\n    }\r\n    setActiveStage(stageId, callbackFunction) {\r\n        this._activeStage = {\r\n            getId() { return stageId; }\r\n        };\r\n        if (callbackFunction)\r\n            callbackFunction(\"success\");\r\n    }\r\n    getActivePath() {\r\n        return this._activePath;\r\n    }\r\n    setActivePath(stages) {\r\n        this._activePath = new ItemCollection(stages);\r\n    }\r\n    getEnabledProcesses(callbackFunction) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getSelectedStage() {\r\n        return this._selectedStage;\r\n    }\r\n    setSelectedStage(stageId, event) {\r\n        this._selectedStage = {\r\n            getId() { return stageId; }\r\n        };\r\n        this.fireOnChangeContextHandlers(this._onStageSelectedHandlers, event);\r\n    }\r\n    addOnPreProcessStatusChange(handler) {\r\n        const index = this._onPreProcessStatusChangeHandlers.indexOf(handler);\r\n        if (index < 0)\r\n            this._onPreProcessStatusChangeHandlers.push(handler);\r\n    }\r\n    addOnPreStageChange(handler) {\r\n        if (!this._onPreStageChangeHandlers.includes(handler))\r\n            this._onPreStageChangeHandlers.push(handler);\r\n    }\r\n    addOnProcessStatusChange(handler) {\r\n        const index = this._onProcessStatusChangeHandlers.indexOf(handler);\r\n        if (index < 0)\r\n            this._onProcessStatusChangeHandlers.push(handler);\r\n    }\r\n    addOnStageChange(handler) {\r\n        const index = this._onStageChangeHandlers.indexOf(handler);\r\n        if (index < 0)\r\n            this._onStageChangeHandlers.push(handler);\r\n    }\r\n    addOnStageSelected(handler) {\r\n        const index = this._onStageSelectedHandlers.indexOf(handler);\r\n        if (index < 0)\r\n            this._onStageSelectedHandlers.push(handler);\r\n    }\r\n    removeOnPreProcessStatusChange(handler) {\r\n        throw new Error(\"Handlers can't be removed here.\");\r\n    }\r\n    removeOnPreStageChange(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    removeOnProcessStatusChange(handler) {\r\n        throw new Error(\"Handlers can't be removed here.\");\r\n    }\r\n    removeOnStageChange(handler) {\r\n        const index = this._onStageChangeHandlers.indexOf(handler);\r\n        if (index >= 0)\r\n            this._onStageChangeHandlers.slice(index, 1);\r\n    }\r\n    removeOnStageSelected(handler) {\r\n        const index = this._onStageSelectedHandlers.indexOf(handler);\r\n        if (index >= 0)\r\n            this._onStageSelectedHandlers.slice(index, 1);\r\n    }\r\n    moveNext(callbackFunction) {\r\n        if (callbackFunction)\r\n            callbackFunction(\"success\");\r\n    }\r\n    movePrevious(callbackFunction) {\r\n        if (callbackFunction)\r\n            callbackFunction(\"success\");\r\n    }\r\n    getInstanceId() {\r\n        return this._instanceId;\r\n    }\r\n    getInstanceName() {\r\n        return \"Test Instance Name\";\r\n    }\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n    setStatus(status, callbackFunction) {\r\n        this._status = status;\r\n        if (callbackFunction)\r\n            callbackFunction(\"finished\" /* Finished */);\r\n    }\r\n    fireOnChangeContextHandlers(handlers, e) {\r\n        for (const handler of handlers) {\r\n            handler(e);\r\n        }\r\n    }\r\n    fireOnChangeProcessHandlers(handlers, e) {\r\n        for (const handler of handlers) {\r\n            handler(e);\r\n        }\r\n    }\r\n}\n\nclass FormContextDataMock {\r\n    _mockData;\r\n    attributes;\r\n    entity;\r\n    process;\r\n    constructor(mockData) {\r\n        this._mockData = mockData;\r\n        this.attributes = new ItemCollection(this._mockData.attributes);\r\n        this.entity = new FormContextEntityMock(this._mockData);\r\n        this.process = new FormContextDataProcessMock(this._mockData);\r\n    }\r\n    addOnLoad(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getIsDirty() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    isValid() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    removeOnLoad(handler) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    refresh(save) {\r\n        return new Promise(resolve => resolve(undefined));\r\n    }\r\n    save(saveOptions) {\r\n        return new Promise(resolve => resolve(undefined));\r\n    }\r\n}\n\nclass FooterSectionMock {\r\n    isVisible;\r\n    constructor() {\r\n        this.isVisible = true;\r\n    }\r\n    getVisible() {\r\n        return this.isVisible;\r\n    }\r\n    setVisible(bool) {\r\n        this.isVisible = bool;\r\n    }\r\n}\n\nclass HeaderSectionMock {\r\n    isBodyVisible;\r\n    isCommandBarVisible;\r\n    isTabNavigatorVisible;\r\n    constructor() {\r\n        this.isBodyVisible = true;\r\n        this.isCommandBarVisible = true;\r\n        this.isTabNavigatorVisible = true;\r\n    }\r\n    getBodyVisible() {\r\n        return this.isBodyVisible;\r\n    }\r\n    setBodyVisible(bool) {\r\n        this.isBodyVisible = bool;\r\n    }\r\n    getCommandBarVisible() {\r\n        return this.isCommandBarVisible;\r\n    }\r\n    setCommandBarVisible(bool) {\r\n        this.isCommandBarVisible = bool;\r\n    }\r\n    getTabNavigatorVisible() {\r\n        return this.isTabNavigatorVisible;\r\n    }\r\n    setTabNavigatorVisible(bool) {\r\n        this.isTabNavigatorVisible = bool;\r\n    }\r\n}\n\nclass FormContextUIMock {\r\n    _mockData;\r\n    process;\r\n    formSelector;\r\n    navigation;\r\n    quickForms;\r\n    controls;\r\n    tabs;\r\n    formType;\r\n    footerSection;\r\n    headerSection;\r\n    constructor(mockData) {\r\n        this._mockData = mockData;\r\n        this.formType = this._mockData.formType;\r\n        this.formSelector = new FormSelectorMock();\r\n        this.tabs = new ItemCollection(this._mockData.tabs);\r\n        this.controls = new ItemCollection(this._mockData.controls);\r\n        this.footerSection = new FooterSectionMock();\r\n        this.headerSection = new HeaderSectionMock();\r\n    }\r\n    clearFormNotification() {\r\n        return false;\r\n    }\r\n    close() {\r\n    }\r\n    getFormType() {\r\n        return this.formType;\r\n    }\r\n    setFormType(value) {\r\n        this.formType = value;\r\n    }\r\n    getViewPortHeight() {\r\n        return 500;\r\n    }\r\n    getViewPortWidth() {\r\n        return 500;\r\n    }\r\n    refreshRibbon() {\r\n    }\r\n    setFormNotification(message, level, uniqueId) {\r\n        return false;\r\n    }\r\n}\r\nclass FormSelectorMock {\r\n    _currentFormItem;\r\n    constructor() {\r\n        this._currentFormItem = new FormItemMock();\r\n        this.items = new ItemCollection([]);\r\n    }\r\n    getCurrentItem() {\r\n        return this._currentFormItem;\r\n    }\r\n    setCurrentItem(formItem) {\r\n        this._currentFormItem = formItem;\r\n    }\r\n    items;\r\n}\r\nclass FormItemMock {\r\n    setVisible(isVisible) {\r\n    }\r\n    getId() {\r\n        return \"\";\r\n    }\r\n    getLabel() {\r\n        return \"\";\r\n    }\r\n    navigate() {\r\n    }\r\n}\n\nclass FormContextMock {\r\n    _mockData;\r\n    data;\r\n    ui;\r\n    constructor(mockData) {\r\n        this._mockData = mockData;\r\n        this.data = new FormContextDataMock(this._mockData);\r\n        this.ui = new FormContextUIMock(this._mockData);\r\n    }\r\n    getAttribute(input) {\r\n        return this.data.attributes.get(input);\r\n    }\r\n    getControl(input) {\r\n        if (input === undefined || input === null)\r\n            return this._mockData.controls;\r\n        if (typeof input !== \"string\")\r\n            throw new Error(\"Only attribute name allowed\");\r\n        const { controls } = this._mockData;\r\n        for (const cont of controls) {\r\n            if (cont.attribute.controls.get(input)) {\r\n                return cont;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\n\nclass SectionMock {\r\n    controls;\r\n    _name;\r\n    _visible;\r\n    _label;\r\n    parent;\r\n    constructor(sectionData) {\r\n        const { name = \"no_name\", parent = null, controls = [], } = sectionData;\r\n        this.controls = new ItemCollection(controls);\r\n        this._name = name;\r\n        this.parent = parent;\r\n        this.controls.forEach(c => c.parent = this);\r\n    }\r\n    setVisible(visible) {\r\n        this._visible = visible;\r\n    }\r\n    getVisible() {\r\n        return this._visible || false;\r\n    }\r\n    getLabel() {\r\n        return this._label || \"\";\r\n    }\r\n    setLabel(label) {\r\n        this._label = label;\r\n    }\r\n    getName() {\r\n        return this._name;\r\n    }\r\n    getParent() {\r\n        return this.parent;\r\n    }\r\n}\n\nclass TabMock {\r\n    sections;\r\n    _displayState;\r\n    _name;\r\n    _parent;\r\n    _changeHandlers;\r\n    _visible;\r\n    _label;\r\n    constructor(tabData) {\r\n        const { name = \"no_name\", displayState = \"expanded\", parent = null, sections = [], } = tabData;\r\n        this.sections = new ItemCollection(sections);\r\n        this._changeHandlers = new Array();\r\n        this._visible = false;\r\n        this._label = \"\";\r\n        this._displayState = displayState;\r\n        this._name = name;\r\n        this._parent = parent;\r\n        this.sections.forEach(c => c.parent = this);\r\n    }\r\n    addTabStateChange(handler) {\r\n        if (this._changeHandlers.includes(handler))\r\n            this._changeHandlers.push(handler);\r\n    }\r\n    getDisplayState() {\r\n        return this._displayState;\r\n    }\r\n    getName() {\r\n        return this._name;\r\n    }\r\n    getParent() {\r\n        return this._parent;\r\n    }\r\n    removeTabStateChange(handler) {\r\n        const index = this._changeHandlers.indexOf(handler);\r\n        if (index >= 0)\r\n            this._changeHandlers.slice(index, 1);\r\n    }\r\n    setDisplayState(displayState) {\r\n        this._displayState = displayState;\r\n        for (const handler of this._changeHandlers) {\r\n            handler(null);\r\n        }\r\n    }\r\n    setVisible(visible) {\r\n        this._visible = visible;\r\n    }\r\n    getVisible() {\r\n        return this._visible;\r\n    }\r\n    getLabel() {\r\n        return this._label;\r\n    }\r\n    setLabel(label) {\r\n        this._label = label;\r\n    }\r\n    setFocus() {\r\n        return;\r\n    }\r\n}\n\nclass ClientContextMock {\r\n    getClient() {\r\n        return \"Web\";\r\n    }\r\n    getClientState() {\r\n        return \"Online\";\r\n    }\r\n    getFormFactor() {\r\n        return 1 /* Desktop */;\r\n    }\r\n    isOffline() {\r\n        return false;\r\n    }\r\n}\n\nconst Guids = {\r\n    GuidA: FormUtils.normalizeId(Guid.generate()),\r\n    GuidB: FormUtils.normalizeId(Guid.generate()),\r\n    GuidC: FormUtils.normalizeId(Guid.generate()),\r\n    GuidD: FormUtils.normalizeId(Guid.generate()),\r\n    GuidE: FormUtils.normalizeId(Guid.generate()),\r\n    GuidF: FormUtils.normalizeId(Guid.generate()),\r\n};\n\nclass OrganizationSettingsMock {\r\n    baseCurrency;\r\n    baseCurrencyId;\r\n    defaultCountryCode;\r\n    isAutoSaveEnabled;\r\n    languageId;\r\n    organizationId;\r\n    uniqueName;\r\n    useSkypeProtocol;\r\n    organizationGeo;\r\n    constructor() {\r\n        this.baseCurrency = {\r\n            id: Guids.GuidA,\r\n            name: \"\",\r\n            entityType: \"\"\r\n        };\r\n        this.baseCurrencyId = Guid.generate();\r\n        this.defaultCountryCode = \"en\";\r\n        this.isAutoSaveEnabled = true;\r\n        this.languageId = 1033;\r\n        this.organizationId = Guid.generate();\r\n        this.uniqueName = \"UNIQUE NAME\";\r\n        this.useSkypeProtocol = false;\r\n        this.organizationGeo = \"\";\r\n    }\r\n}\n\nclass UserSettingsMock {\r\n    defaultDashboardId;\r\n    isGuidedHelpEnabled;\r\n    isHighContrastEnabled;\r\n    isRTL;\r\n    languageId;\r\n    roles;\r\n    securityRolePrivileges;\r\n    securityRoles;\r\n    transactionCurrency;\r\n    transactionCurrencyId;\r\n    userId;\r\n    userName;\r\n    constructor() {\r\n        this.defaultDashboardId = Guid.generate();\r\n        this.isGuidedHelpEnabled = false;\r\n        this.isHighContrastEnabled = false;\r\n        this.isRTL = false;\r\n        this.languageId = 1033;\r\n        this.roles = new ItemCollection([]);\r\n        this.securityRolePrivileges = [Guid.generate(), Guid.generate()];\r\n        this.securityRoles = [Guid.generate(), Guid.generate()];\r\n        this.transactionCurrency = { id: \"\", name: \"\", entityType: \"\" };\r\n        this.transactionCurrencyId = Guid.generate();\r\n        this.userId = Guid.generate();\r\n        this.userName = \"TEST_USER\";\r\n        this.dateFormattingInfo = {};\r\n    }\r\n    dateFormattingInfo;\r\n    getTimeZoneOffsetMinutes() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\n\n// noinspection JSClosureCompilerSyntax\r\nclass GlobalContextMock {\r\n    client;\r\n    organizationSettings;\r\n    userSettings;\r\n    constructor() {\r\n        this.client = new ClientContextMock();\r\n        this.organizationSettings = new OrganizationSettingsMock();\r\n        this.userSettings = new UserSettingsMock();\r\n    }\r\n    getCurrentAppSetting(settingName) {\r\n        return \"\";\r\n    }\r\n    getAdvancedConfigSetting(setting) {\r\n        return 0;\r\n    }\r\n    getClientUrl() {\r\n        return \"https://unit-test-org.dynamics.com/\";\r\n    }\r\n    getCurrentAppName() {\r\n        return Promise.resolve(\"Test App\");\r\n    }\r\n    getCurrentAppProperties() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getCurrentAppUrl() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getCurrentTheme() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getIsAutoSaveEnabled() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOrgLcid() {\r\n        return 1033;\r\n    }\r\n    getOrgUniqueName() {\r\n        return \"TestOrgName\";\r\n    }\r\n    getQueryStringParameters() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getTimeZoneOffsetMinutes() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getUserId() {\r\n        return this.userSettings.userId;\r\n    }\r\n    getUserLcid() {\r\n        return this.userSettings.languageId;\r\n    }\r\n    getUserName() {\r\n        return this.userSettings.userName;\r\n    }\r\n    getUserRoles() {\r\n        return this.userSettings.securityRolePrivileges;\r\n    }\r\n    getVersion() {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    isOnPremise() {\r\n        return false;\r\n    }\r\n    prependOrgName(sPath) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n}\n\nclass DynamicsContextMockData {\r\n    attributes;\r\n    controls;\r\n    tabs;\r\n    formType;\r\n    constructor(data) {\r\n        const { attributes = [], controls = [], tabs = [], formType = 2, } = data;\r\n        this.attributes = attributes;\r\n        this.controls = controls;\r\n        this.tabs = tabs;\r\n        this.formType = formType;\r\n    }\r\n    static createFromForm(form) {\r\n        const formInst = new form();\r\n        const keys = Object.keys(formInst);\r\n        const attributes = [];\r\n        const tabs = [];\r\n        const controls = [];\r\n        for (const key of keys) {\r\n            const prop = formInst[key];\r\n            if (prop instanceof FormAttributeBase) {\r\n                const { attr, contr } = createAttributeAndControlMock(prop);\r\n                attributes.push(attr);\r\n                controls.push(contr);\r\n            }\r\n            else if (prop instanceof Tab) {\r\n                tabs.push(createTabMock(prop));\r\n            }\r\n        }\r\n        return new DynamicsContextMockData({\r\n            attributes, tabs, controls,\r\n        });\r\n    }\r\n}\r\nfunction createTabMock(prop) {\r\n    const localSections = [];\r\n    const sectionKeys = Object.keys(prop);\r\n    for (const key of sectionKeys) {\r\n        const section = prop[key];\r\n        if (section instanceof Section) {\r\n            localSections.push(new SectionMock({\r\n                name: section._sectionName,\r\n            }));\r\n        }\r\n    }\r\n    return new TabMock({\r\n        name: prop._tabName,\r\n        sections: localSections,\r\n    });\r\n}\r\nfunction createAttributeAndControlMock(prop) {\r\n    let initialValue = null;\r\n    let attr = null;\r\n    if (prop instanceof BooleanFormAttribute) {\r\n        initialValue = false;\r\n    }\r\n    else if (prop instanceof DecimalFormAttribute\r\n        || prop instanceof DoubleFormAttribute\r\n        || prop instanceof MoneyFormAttribute) {\r\n        initialValue = 0.0;\r\n    }\r\n    else if (prop instanceof StringFormAttribute\r\n        || prop instanceof EntityNameFormAttribute) {\r\n        initialValue = \"\";\r\n    }\r\n    else if (prop instanceof DateTimeFormAttribute) {\r\n        initialValue = new Date();\r\n    }\r\n    else if (prop instanceof IntegerFormAttribute\r\n        || prop instanceof NumberFormAttribute) {\r\n        initialValue = 0;\r\n    }\r\n    else if (prop instanceof LookupAttributeMock\r\n        || prop instanceof UniqueidentifierFormAttribute\r\n        || prop instanceof CustomerFormAttribute\r\n        || prop instanceof OwnerFormAttribute\r\n        || prop instanceof PartyListFormAttribute\r\n        || prop instanceof StateFormAttribute\r\n        || prop instanceof StatusFormAttribute) {\r\n        initialValue = [];\r\n        attr = new LookupAttributeMock({\r\n            name: prop.attributeName,\r\n            value: initialValue\r\n        });\r\n    }\r\n    else if (prop instanceof MemoFormAttribute) {\r\n        initialValue = null;\r\n    }\r\n    else if (prop instanceof PicklistFormAttribute\r\n        || prop instanceof MultiSelectPicklistFormAttribute) {\r\n        initialValue = [];\r\n        attr = new OptionSetAttributeMock({\r\n            name: prop.attributeName,\r\n            value: initialValue\r\n        });\r\n    }\r\n    if (attr === null) {\r\n        attr = new AttributeMock({\r\n            name: prop.attributeName,\r\n            value: initialValue,\r\n        });\r\n    }\r\n    const contr = attr.createNewControl();\r\n    return { attr, contr };\r\n}\n\nclass DynamicsContextMock extends DynamicsContext {\r\n    _mockData;\r\n    constructor(mockData) {\r\n        super();\r\n        this._mockData = mockData || new DynamicsContextMockData({});\r\n        this._globalContext = new GlobalContextMock();\r\n        this._formContext = new FormContextMock(this._mockData);\r\n        this._executionContext = new ExecutionContextMock(this._globalContext, this._formContext);\r\n    }\r\n    static createFromForm(form) {\r\n        const mockData = DynamicsContextMockData.createFromForm(form);\r\n        return new DynamicsContextMock(mockData);\r\n    }\r\n    ;\r\n    get mockData() {\r\n        return this._mockData;\r\n    }\r\n    get executionContext() {\r\n        return this._executionContext;\r\n    }\r\n    get formContext() {\r\n        return this._formContext;\r\n    }\r\n    get globalContext() {\r\n        if (!this._globalContext)\r\n            throw new Error(\"Global Context not available\");\r\n        return this._globalContext;\r\n    }\r\n}\n\nclass FormVerifier {\r\n    _action;\r\n    _assertion;\r\n    constructor(action, assertion) {\r\n        this._action = action;\r\n        this._assertion = assertion;\r\n    }\r\n    execute() {\r\n        return new Promise((resolve, reject) => {\r\n            this._action();\r\n            // setTimeout to defer execution of the _assertion function\r\n            // till the call stack is empty.\r\n            setTimeout(() => {\r\n                try {\r\n                    this._assertion();\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }, 0);\r\n        });\r\n    }\r\n    /**\r\n     * Executes all the FormVerifiers\r\n     */\r\n    static async executeVerifiers(verifiers) {\r\n        return new Promise((resolve, reject) => {\r\n            // setTimeout to defer execution of the _assertion function\r\n            // till the call stack is empty.\r\n            setTimeout(async () => {\r\n                try {\r\n                    for (const verifier of verifiers) {\r\n                        await verifier.execute();\r\n                    }\r\n                    resolve();\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }, 0);\r\n        });\r\n    }\r\n}\n\nclass FakeResponse {\r\n    text;\r\n    constructor(text) {\r\n        this.text = text;\r\n    }\r\n}\n\nclass FakeCommandResponse extends FakeResponse {\r\n    _called;\r\n    matcher;\r\n    constructor(commandName, commandResult, commandParameter = {}) {\r\n        const data = {\r\n            adssf_commandname: commandName,\r\n            adssf_parameter: JSON.stringify(commandParameter),\r\n            adssf_result: JSON.stringify(commandResult),\r\n        };\r\n        super(JSON.stringify(data));\r\n        this._called = false;\r\n        this.matcher = (url, opts) => {\r\n            if (!opts.body)\r\n                return false;\r\n            const obj = JSON.parse(opts.body?.toString());\r\n            const matches = obj.adssf_commandname === commandName;\r\n            this._called = this._called || matches;\r\n            return matches;\r\n        };\r\n    }\r\n    gotCalled() {\r\n        return this._called;\r\n    }\r\n}\n\nclass FakeODataResponse extends FakeResponse {\r\n    constructor(data) {\r\n        if (data instanceof Array)\r\n            data = { value: data };\r\n        super(JSON.stringify(data));\r\n    }\r\n}\n\nclass FakeServer {\r\n    fetchMock;\r\n    constructor() {\r\n        this.fetchMock = fetch;\r\n    }\r\n    restore() {\r\n        this.fetchMock.restore();\r\n    }\r\n    registerResponse(matcher, response, options) {\r\n        if (response instanceof FakeResponse)\r\n            response = response.text;\r\n        this.fetchMock.mock(matcher, response, options);\r\n    }\r\n}\n\nfunction resolvePluralNameOrThrow(pluralName) {\r\n    if (typeof pluralName === \"string\") {\r\n        return pluralName;\r\n    }\r\n    throw Error(\"Invalid argument \\\"pluralName\\\". Parameter should be of type string.\");\r\n}\r\nfunction resolvePluralNameOfODataEntityOrThrow(entity) {\r\n    if (!!entity) {\r\n        var entityInstance = new entity();\r\n        if (!!entityInstance.EntitySetName && typeof entityInstance.EntitySetName === \"string\") {\r\n            return entityInstance.EntitySetName;\r\n        }\r\n    }\r\n    throw Error(\"Invalid argument \\\"entity\\\". Parameter should be of type ODataEntity.\");\r\n}\r\nclass OdataRegExBuilder {\r\n    /**\r\n     * Creates an Regex expression that matches a retrieve statement of a single entity\r\n     *\r\n     * @param {ODataEntity} entity The entity object (e.g. Account)\r\n     * @param {string} guid The entity id\r\n     * @returns {RegExp}\r\n     */\r\n    static retrieveSingle(entity, guid) {\r\n        let pluralName = resolvePluralNameOfODataEntityOrThrow(entity);\r\n        if (typeof guid !== \"string\") {\r\n            throw Error(\"Invalid argument \\\"guid\\\"\");\r\n        }\r\n        return new RegExp(`${pluralName}\\\\(${guid}\\\\)`);\r\n    }\r\n    /**\r\n     * Creates an Regex expression that matches a retrieve statement of a single entity\r\n     *\r\n     * @param {string} entity The entity's plural name (e.g. \"accounts\")\r\n     * @param {string} guid The entity id\r\n     * @returns {RegExp}\r\n     */\r\n    static retrieveSingleByResourceName(pluralName, guid) {\r\n        let entityName = resolvePluralNameOrThrow(pluralName);\r\n        if (typeof guid !== \"string\") {\r\n            throw Error(\"Invalid argument \\\"guid\\\"\");\r\n        }\r\n        return new RegExp(`${entityName}\\\\(${guid}\\\\)`);\r\n    }\r\n    /**\r\n    * Creates an Regex expression that matches a retrieve statement of a all records of a specific entity type\r\n    *\r\n    * @param {string|object} entityOrPluralName The entity object (e.g. Account) or plural name (e.g. \"accounts\")\r\n    * @returns {RegExp}\r\n    */\r\n    static retrieveAll(entity) {\r\n        const pluralName = resolvePluralNameOfODataEntityOrThrow(entity);\r\n        return new RegExp(pluralName);\r\n    }\r\n    /**\r\n    * Creates an Regex expression that matches a retrieve statement of a all records of a specific entity type\r\n    *\r\n    * @param {string} resourceName The entity's plural name (e.g. \"accounts\")\r\n    * @returns {RegExp}\r\n    */\r\n    static retrieveAllByResourceName(resourceName) {\r\n        const pluralName = resolvePluralNameOrThrow(resourceName);\r\n        return new RegExp(pluralName);\r\n    }\r\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@avanade/bizapps-sdk/dist/bizapps-sdk.esm.js\n");

/***/ }),

/***/ "./src/entity/Account/Ribbon/account.ribbon.controller.ts":
/*!****************************************************************!*\
  !*** ./src/entity/Account/Ribbon/account.ribbon.controller.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AccountRibbonController\": () => (/* binding */ AccountRibbonController)\n/* harmony export */ });\n/* harmony import */ var _generated_forms_account_informaci_form_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../generated/forms/account.informació.form.generated */ \"./src/generated/forms/account.informació.form.generated.ts\");\n/* harmony import */ var _Services_accountCommandService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Services/accountCommandService */ \"./src/entity/Account/Services/accountCommandService.ts\");\n\n\nclass AccountRibbonController {\n  constructor(dynamicsContext) {\n    this.dynamicsContext = dynamicsContext;\n    this.form = new _generated_forms_account_informaci_form_generated__WEBPACK_IMPORTED_MODULE_0__.AccountForm(this.dynamicsContext.formContext);\n    this.syncCantensOK = \"001\";\n    this.syncCantensKO = \"002\";\n  }\n  /* #region Unsubscribe Button */\n\n\n  async unsubscribe() {\n    const commandController = new _Services_accountCommandService__WEBPACK_IMPORTED_MODULE_1__.AccountCommandService(this.dynamicsContext); //await commandController.unsubscribe(this.form.objectId);\n\n    await this.dynamicsContext.formContext.data.refresh(false);\n  }\n\n  async isUnsubscribeEnabled() {\n    return new Promise(resolve => setTimeout(() => {\n      resolve(true);\n    }, 1000));\n  }\n  /* #endregion */\n\n\n  async syncCatens() {\n    this.clrearAllNotifications();\n    const entityCode = this.form.pfc_catalog_code.getValue();\n    let url = \"https://azurecatens.azurewebsites.net/api/CallCatens/codi/\" + entityCode + \"?code=cJacZSk9M1UgnGvW6CtiuWC0hmDdCtk5BW9MamNwiapD7XZuwJ0dQw==\";\n    this.postData(url);\n  }\n\n  async postData(url) {\n    let result;\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      } //body: JSON.stringify(inputData),\n\n    };\n    fetch(url, options).then(response => {\n      debugger;\n\n      switch (response.status) {\n        case 200:\n          this.dynamicsContext.formContext.ui.setFormNotification(\"Sincronización con CATENS realizada con éxito\", \"INFO\", this.syncCantensOK);\n          break;\n\n        case 400:\n          this.dynamicsContext.formContext.ui.setFormNotification(\"No se ha podido encontrar la entidad.\", \"ERROR\", this.syncCantensKO);\n          break;\n\n        case 404:\n          this.dynamicsContext.formContext.ui.setFormNotification(\"Ha ocurrido un error al llamar al servicio\", \"ERROR\", this.syncCantensKO);\n          break;\n\n        default:\n          console.log(\"No tengo mascota\");\n          break;\n      }\n    }).then(data => {}).catch(e => {\n      this.dynamicsContext.formContext.ui.setFormNotification(\"Ha ocurrido un error inesperado\", \"ERROR\", this.syncCantensKO);\n    });\n  }\n\n  async clrearAllNotifications() {\n    this.dynamicsContext.formContext.ui.clearFormNotification(this.syncCantensOK);\n    this.dynamicsContext.formContext.ui.clearFormNotification(this.syncCantensKO);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/entity/Account/Ribbon/account.ribbon.controller.ts\n");

/***/ }),

/***/ "./src/entity/Account/Services/accountCommandService.ts":
/*!**************************************************************!*\
  !*** ./src/entity/Account/Services/accountCommandService.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AccountCommandService\": () => (/* binding */ AccountCommandService)\n/* harmony export */ });\n/* harmony import */ var _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avanade/bizapps-sdk */ \"./node_modules/@avanade/bizapps-sdk/dist/bizapps-sdk.esm.js\");\n\nclass AccountCommandService extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Observable {\n  constructor(dynamicsContext) {\n    super();\n    this.dynamicsContext = dynamicsContext;\n  }\n\n  async unsubscribe(accountId) {\n    const command = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.ODataCommand(this.dynamicsContext.globalContext);\n    const parameters = {\n      AccountId: accountId\n    };\n    return command.execute(\"Unsubscribe\", parameters);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZW50aXR5L0FjY291bnQvU2VydmljZXMvYWNjb3VudENvbW1hbmRTZXJ2aWNlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFHTyxNQUFNRSxxQkFBTixTQUFvQ0YsNERBQXBDLENBQStDO0FBR2xERyxFQUFBQSxXQUFXLENBQUNDLGVBQUQsRUFBbUM7QUFDMUM7QUFFQSxTQUFLQSxlQUFMLEdBQXVCQSxlQUF2QjtBQUNIOztBQUVnQixRQUFYQyxXQUFXLENBQUNDLFNBQUQsRUFBb0I7QUFDakMsVUFBTUMsT0FBTyxHQUFHLElBQUlOLDhEQUFKLENBQWlCLEtBQUtHLGVBQUwsQ0FBcUJJLGFBQXRDLENBQWhCO0FBRUEsVUFBTUMsVUFBVSxHQUFHO0FBQ2ZDLE1BQUFBLFNBQVMsRUFBRUo7QUFESSxLQUFuQjtBQUlBLFdBQU9DLE9BQU8sQ0FBQ0ksT0FBUixDQUFnQixhQUFoQixFQUErQkYsVUFBL0IsQ0FBUDtBQUNIOztBQWpCaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYXZhbmFkZS90ZW1wbGF0ZS8uL3NyYy9lbnRpdHkvQWNjb3VudC9TZXJ2aWNlcy9hY2NvdW50Q29tbWFuZFNlcnZpY2UudHM/N2I4NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBPRGF0YUNvbW1hbmQgfSBmcm9tIFwiQGF2YW5hZGUvYml6YXBwcy1zZGtcIjtcclxuaW1wb3J0IHsgRHluYW1pY3NDb250ZXh0IH0gZnJvbSBcIkBhdmFuYWRlL2JpemFwcHMtc2RrXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQWNjb3VudENvbW1hbmRTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZSB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGR5bmFtaWNzQ29udGV4dDogRHluYW1pY3NDb250ZXh0O1xyXG4gICAgXHJcbiAgICBjb25zdHJ1Y3RvcihkeW5hbWljc0NvbnRleHQ6IER5bmFtaWNzQ29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZHluYW1pY3NDb250ZXh0ID0gZHluYW1pY3NDb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVuc3Vic2NyaWJlKGFjY291bnRJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IG5ldyBPRGF0YUNvbW1hbmQodGhpcy5keW5hbWljc0NvbnRleHQuZ2xvYmFsQ29udGV4dCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7XHJcbiAgICAgICAgICAgIEFjY291bnRJZDogYWNjb3VudElkLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBjb21tYW5kLmV4ZWN1dGUoXCJVbnN1YnNjcmliZVwiLCBwYXJhbWV0ZXJzKTtcclxuICAgIH1cclxufVxyXG4iXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsIk9EYXRhQ29tbWFuZCIsIkFjY291bnRDb21tYW5kU2VydmljZSIsImNvbnN0cnVjdG9yIiwiZHluYW1pY3NDb250ZXh0IiwidW5zdWJzY3JpYmUiLCJhY2NvdW50SWQiLCJjb21tYW5kIiwiZ2xvYmFsQ29udGV4dCIsInBhcmFtZXRlcnMiLCJBY2NvdW50SWQiLCJleGVjdXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/entity/Account/Services/accountCommandService.ts\n");

/***/ }),

/***/ "./src/generated/forms/account.informació.form.generated.ts":
/*!******************************************************************!*\
  !*** ./src/generated/forms/account.informació.form.generated.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AccountForm\": () => (/* binding */ AccountForm),\n/* harmony export */   \"SUMMARY_TABTab\": () => (/* binding */ SUMMARY_TABTab),\n/* harmony export */   \"tab_14Tab\": () => (/* binding */ tab_14Tab),\n/* harmony export */   \"tab_9Tab\": () => (/* binding */ tab_9Tab),\n/* harmony export */   \"tab_11Tab\": () => (/* binding */ tab_11Tab),\n/* harmony export */   \"tab_12Tab\": () => (/* binding */ tab_12Tab),\n/* harmony export */   \"tab_10Tab\": () => (/* binding */ tab_10Tab),\n/* harmony export */   \"tab_13Tab\": () => (/* binding */ tab_13Tab),\n/* harmony export */   \"tab_8Tab\": () => (/* binding */ tab_8Tab)\n/* harmony export */ });\n/* harmony import */ var _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @avanade/bizapps-sdk */ \"./node_modules/@avanade/bizapps-sdk/dist/bizapps-sdk.esm.js\");\n// Available Form(sb): Informació, TimelineWallControl - Compte - Principal, Compte per a l’experiència de diverses sessions, Sales Insights, Creació ràpida d'un compte, Organismes\n// Actual Form:       Informació\n\nclass AccountForm extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.FormObjectBase {\n  constructor(formContext) {\n    super(formContext, \"Informació\");\n    this.Address1_AddressId = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.UniqueidentifierFormAttribute(\"address1_addressid\", formContext);\n    this.Address1_City = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_city\", formContext);\n    this.Address1_Line1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_line1\", formContext);\n    this.Address1_Line2 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_line2\", formContext);\n    this.Address1_Line3 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_line3\", formContext);\n    this.Address1_PostalCode = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_postalcode\", formContext);\n    this.Address1_StateOrProvince = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_stateorprovince\", formContext);\n    this.Address1_Telephone1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"address1_telephone1\", formContext);\n    this.Address2_AddressId = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.UniqueidentifierFormAttribute(\"address2_addressid\", formContext);\n    this.CreatedBy = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.LookupFormAttribute(\"createdby\", formContext);\n    this.CreatedOn = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.DateTimeFormAttribute(\"createdon\", formContext);\n    this.EMailAddress1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"emailaddress1\", formContext);\n    this.ModifiedBy = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.LookupFormAttribute(\"modifiedby\", formContext);\n    this.ModifiedOn = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.DateTimeFormAttribute(\"modifiedon\", formContext);\n    this.Name = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"name\", formContext);\n    this.OwnerId = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.OwnerFormAttribute(\"ownerid\", formContext);\n    this.pfc_acronym = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_acronym\", formContext);\n    this.pfc_brand_acronym = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_brand_acronym\", formContext);\n    this.pfc_catalog_code = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_catalog_code\", formContext);\n    this.pfc_catalogentitytype = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_catalogentitytype\", formContext);\n    this.pfc_ccaa_inventory_code = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_ccaa_inventory_code\", formContext);\n    this.pfc_classification_inventory_ccaa = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_classification_inventory_ccaa\", formContext);\n    this.pfc_departamental_agrupationid = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.LookupFormAttribute(\"pfc_departamental_agrupationid\", formContext);\n    this.pfc_eco_jur_end_date = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.DateTimeFormAttribute(\"pfc_eco_jur_end_date\", formContext);\n    this.pfc_eco_jur_init_date = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.DateTimeFormAttribute(\"pfc_eco_jur_init_date\", formContext);\n    this.pfc_entity_classification = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_entity_classification\", formContext);\n    this.pfc_entitytype = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.PicklistFormAttribute(\"pfc_entitytype\", formContext);\n    this.pfc_governing_body = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_governing_body\", formContext);\n    this.pfc_high_source = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_high_source\", formContext);\n    this.pfc_high_source_information = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_high_source_information\", formContext);\n    this.pfc_lastsynchronization = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.DateTimeFormAttribute(\"pfc_lastsynchronization\", formContext);\n    this.pfc_legal_nature_aggregate = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_legal_nature_aggregate\", formContext);\n    this.pfc_managerId = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.LookupFormAttribute(\"pfc_managerid\", formContext);\n    this.pfc_maximum_number_of_members = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_maximum_number_of_members\", formContext);\n    this.pfc_measuring_participation = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_measuring_participation\", formContext);\n    this.pfc_minimum_number_of_members = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_minimum_number_of_members\", formContext);\n    this.pfc_nif = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_nif\", formContext);\n    this.pfc_observations = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_observations\", formContext);\n    this.pfc_pmp_area = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_pmp_area\", formContext);\n    this.pfc_registration_from = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_registration_from\", formContext);\n    this.pfc_registrationcode = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_registrationcode\", formContext);\n    this.pfc_responsableid = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.LookupFormAttribute(\"pfc_responsableid\", formContext);\n    this.pfc_SAC_address = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_sac_address\", formContext);\n    this.pfc_sectorization_sec_generalitat_criterion = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_sectorization_sec_generalitat_criterion\", formContext);\n    this.pfc_street_type = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_street_type\", formContext);\n    this.pfc_total_members_generalitat = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_total_members_generalitat\", formContext);\n    this.pfc_total_participate_gene_uni = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_total_participate_gene_uni\", formContext);\n    this.pfc_total_participation_generalitat = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_total_participation_generalitat\", formContext);\n    this.pfc_total_participation_public_sector = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"pfc_total_participation_public_sector\", formContext);\n    this.pfc_vinculat_catens = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.BooleanFormAttribute(\"pfc_vinculat_catens\", formContext);\n    this.WebSiteURL = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.StringFormAttribute(\"websiteurl\", formContext);\n    this.SUMMARY_TAB = new SUMMARY_TABTab(\"SUMMARY_TAB\", formContext);\n    this.SUMMARY_TAB.ACCOUNT_INFORMATION = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"SUMMARY_TAB\", \"ACCOUNT_INFORMATION\", formContext);\n    this.SUMMARY_TAB.tab_3_section_2 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"SUMMARY_TAB\", \"tab_3_section_2\", formContext);\n    this.tab_14 = new tab_14Tab(\"tab_14\", formContext);\n    this.tab_14.tab_dades_registrals = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_dades_registrals\", formContext);\n    this.tab_14.tab_inventory_data = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_inventory_data\", formContext);\n    this.tab_14.tab_economic_legal_data = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_economic_legal_data\", formContext);\n    this.tab_14.tab_postal_data = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_postal_data\", formContext);\n    this.tab_14.tab_participants_header_data = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_participants_header_data\", formContext);\n    this.tab_14.tab_header_data_governing_body = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_14\", \"tab_header_data_governing_body\", formContext);\n    this.tab_9 = new tab_9Tab(\"tab_9\", formContext);\n    this.tab_9.tab_9_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_9\", \"tab_9_section_1\", formContext);\n    this.tab_11 = new tab_11Tab(\"tab_11\", formContext);\n    this.tab_11.tab_11_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_11\", \"tab_11_section_1\", formContext);\n    this.tab_12 = new tab_12Tab(\"tab_12\", formContext);\n    this.tab_12.tab_12_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_12\", \"tab_12_section_1\", formContext);\n    this.tab_10 = new tab_10Tab(\"tab_10\", formContext);\n    this.tab_10.tab_10_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_10\", \"tab_10_section_1\", formContext);\n    this.tab_13 = new tab_13Tab(\"tab_13\", formContext);\n    this.tab_13.tab_13_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_13\", \"tab_13_section_1\", formContext);\n    this.tab_8 = new tab_8Tab(\"tab_8\", formContext);\n    this.tab_8.tab_8_section_1 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_8\", \"tab_8_section_1\", formContext);\n    this.tab_8.tab_8_section_3 = new _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Section(\"tab_8\", \"tab_8_section_3\", formContext);\n  }\n\n}\nclass SUMMARY_TABTab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_14Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_9Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_11Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_12Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_10Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_13Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}\nclass tab_8Tab extends _avanade_bizapps_sdk__WEBPACK_IMPORTED_MODULE_0__.Tab {\n  constructor(tabName, formContext) {\n    super(tabName, formContext);\n  }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/generated/forms/account.informació.form.generated.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/entity/Account/Ribbon/account.ribbon.controller.ts");
/******/ 	var __webpack_export_target__ = window;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;